<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>klaus&#39; blog</title>
  
  <subtitle>焦虑源于行动的匮乏</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://klaus08.top/"/>
  <updated>2021-07-19T01:53:19.000Z</updated>
  <id>https://klaus08.top/</id>
  
  <author>
    <name>klaus08</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JZ15 反转链表</title>
    <link href="https://klaus08.top/post/8a5a458b.html"/>
    <id>https://klaus08.top/post/8a5a458b.html</id>
    <published>2021-07-19T01:53:19.000Z</published>
    <updated>2021-07-19T01:53:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/75e878df47f24fdc9dc3e400ec6058ca?tpId=13&amp;tqId=11168&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=cyc_github" target="_blank" rel="noopener">原题链接</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>输入一个链表，反转链表后，输出新链表的表头。</p><a id="more"></a><br><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：{1,2,3}</span><br><span class="line">返回值：{3,2,1}</span><br></pre></td></tr></tbody></table></figure><br><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>要把链表反转，就是把从第一个结点开始遍历，依次把每个结点放在当前链表中的头结点位置，保证每次处理的结点之前子的链表是已经反转了的，直到遍历完为止。</p><p>作图的话就是这样。0号结点是为了便于处理新建的附加头节点，如果要把2号结点放在当前链表的头结点位置，首先要保存附加头节点后面的内容，然后让附加头结点指向2号结点，2号结点再指向刚刚保存的附加头结点后面的内容，也就是已经反转过的链表。</p><p><img src="https://gitee.com/man-ljw/PicBed/raw/master/B52085543664C56C68BFCCCC3630457E.png" alt=""></p><br><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">ReverseList</span><span class="params">(ListNode head)</span> </span>{</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        ListNode pro = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>){</span><br><span class="line">            ListNode phead = cur;<span class="comment">//要插到头结点的结点</span></span><br><span class="line">            cur = cur.next;</span><br><span class="line">            ListNode tmp = pro.next;</span><br><span class="line">            pro.next = phead;</span><br><span class="line">            phead.next = tmp;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> pro.next;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/75e878df47f24fdc9dc3e400ec6058ca?tpId=13&amp;amp;tqId=11168&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=/ta/coding-interviews&amp;amp;qru=/ta/coding-interviews/question-ranking&amp;amp;from=cyc_github&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;输入一个链表，反转链表后，输出新链表的表头。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>JZ55 链表中环的入口结点</title>
    <link href="https://klaus08.top/post/eead6742.html"/>
    <id>https://klaus08.top/post/eead6742.html</id>
    <published>2021-07-18T12:35:45.000Z</published>
    <updated>2021-07-18T12:35:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4?tpId=13&amp;tqId=11208&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=cyc_github" target="_blank" rel="noopener">题目描述</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，返回null。 <a id="more"></a></p><h3 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h3><p>输入分为2段，第一段是入环前的链表部分，第二段是链表环的部分，后台将这2个会组装成一个有环或者无环单链表</p><h3 id="返回值描述："><a href="#返回值描述：" class="headerlink" title="返回值描述："></a>返回值描述：</h3><p>返回链表的环的入口结点即可。而我们后台程序会打印这个节点</p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：{1,2},{3,4,5}</span><br><span class="line">返回值：3</span><br><span class="line">说明：返回环形链表入口节点，我们后台会打印该环形链表入口节点，即3</span><br></pre></td></tr></tbody></table></figure><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：{1},{}</span><br><span class="line">返回值："null"</span><br><span class="line">说明：没有环，返回null，后台打印"null"</span><br></pre></td></tr></tbody></table></figure><h2 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：{},{2}</span><br><span class="line">返回值：2</span><br><span class="line">说明：只有环形链表节点2，返回节点2，后台打印2</span><br></pre></td></tr></tbody></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.遍历链表，使用HashSet存储，如果在添加某个结点失败，说明该结点是环的入口。</p><p>2.快慢指针。快慢指针先指向头节点，然后快指针每次走两步，慢指针每次走一步，这样他俩一定会在环中的某一结点相遇。相遇后，慢指针不动，快指针指向头结点，此时慢指针和快指针距离环入口结点的<strong>距离相等</strong>，所以让快慢指针同时前进一步直到他们再次相遇，此时相遇的结点就是入口节点。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="解答一"><a href="#解答一" class="headerlink" title="解答一"></a>解答一</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode pHead)</span> </span>{</span><br><span class="line">    HashSet&lt;ListNode&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (pHead != <span class="keyword">null</span>){</span><br><span class="line">        <span class="keyword">boolean</span> res = set.add(pHead);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="keyword">false</span>){</span><br><span class="line">            <span class="keyword">return</span> pHead;</span><br><span class="line">        }</span><br><span class="line">        pHead = pHead.next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> pHead;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="解答二"><a href="#解答二" class="headerlink" title="解答二"></a>解答二</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode pHead)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (pHead == <span class="keyword">null</span> || pHead.next == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    ListNode fast = pHead, slow = pHead;</span><br><span class="line">    <span class="keyword">do</span> {</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    }<span class="keyword">while</span> (fast != slow);</span><br><span class="line"></span><br><span class="line">    fast = pHead;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fast != slow){</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> fast;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4?tpId=13&amp;amp;tqId=11208&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=/ta/coding-interviews&amp;amp;qru=/ta/coding-interviews/question-ranking&amp;amp;from=cyc_github&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目描述&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，返回null。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>JZ14 链表中倒数最后k个结点</title>
    <link href="https://klaus08.top/post/5492f898.html"/>
    <id>https://klaus08.top/post/5492f898.html</id>
    <published>2021-07-18T05:42:45.000Z</published>
    <updated>2021-07-18T05:42:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/886370fe658f41b498d40fb34ae76ff9?tpId=13&amp;tqId=11167&amp;tab=answerKey&amp;from=cyc_github" target="_blank" rel="noopener">原题链接</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>输入一个链表，输出一个链表，该输出链表包含原链表中从倒数第k个结点至尾节点的全部节点。</p><p>如果该链表长度小于k，请返回一个长度为 0 的链表。<a id="more"></a></p><br><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：{1,2,3,4,5},1</span><br><span class="line">返回值：{5}</span><br></pre></td></tr></tbody></table></figure><br><p>##思路</p><ol><li>遍历链表变量，存在数组中，然后按序创建链表。</li><li>假设链表长度为n，求k个结点组成的链表，只要返回第（n - k + 1) 个结点后面的不动就好了。</li><li>双指针，创建两个结点初始化都指向链表头结点，然后让第一个向后移 k 个结点，如果移动过程中指向null，说明该链表长度小于 k 直接返回null。第一个结点指向第k个时，两个新创建的结点再一起向后移动，直到先移动的结点为null，此时返回第二个结点。</li></ol><br><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="解答一"><a href="#解答一" class="headerlink" title="解答一"></a>解答一</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">FindKthToTail</span> <span class="params">(ListNode pHead, <span class="keyword">int</span> k)</span> </span>{</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        ListNode cur = pHead;</span><br><span class="line">        ListNode res = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode head = res;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span> ){</span><br><span class="line">            arrayList.add(cur.val);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (k &gt; arrayList.size())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// s = 5 - 3</span></span><br><span class="line">            <span class="keyword">int</span> s = arrayList.size() - k;</span><br><span class="line">            <span class="keyword">while</span> (s &lt; arrayList.size()){</span><br><span class="line">                res.next = <span class="keyword">new</span> ListNode(arrayList.get(s));</span><br><span class="line">                res = res.next;</span><br><span class="line">                s++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="解答二"><a href="#解答二" class="headerlink" title="解答二"></a>解答二</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">FindKthToTail</span> <span class="params">(ListNode pHead, <span class="keyword">int</span> k)</span> </span>{</span><br><span class="line"></span><br><span class="line">        ListNode cur = pHead; <span class="comment">//用于遍历链表统计长度</span></span><br><span class="line">        ListNode res = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);<span class="comment">//用于指向倒数第k个结点</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span> ){</span><br><span class="line">            len++;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= <span class="number">0</span> || k&gt; len) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = len -k + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (index-- &gt; <span class="number">0</span>){</span><br><span class="line">            res.next = pHead;</span><br><span class="line">            pHead = pHead.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res.next;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="解答三"><a href="#解答三" class="headerlink" title="解答三"></a>解答三</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">FindKthToTail</span><span class="params">(ListNode pHead, <span class="keyword">int</span> k)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (pHead == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode start = pHead, end = pHead;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (k-- &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">if</span> (start == <span class="keyword">null</span> )</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            start = start.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (start!= <span class="keyword">null</span>){</span><br><span class="line">            start = start.next;</span><br><span class="line">            end = end.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> end;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/886370fe658f41b498d40fb34ae76ff9?tpId=13&amp;amp;tqId=11167&amp;amp;tab=answerKey&amp;amp;from=cyc_github&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;输入一个链表，输出一个链表，该输出链表包含原链表中从倒数第k个结点至尾节点的全部节点。&lt;/p&gt;
&lt;p&gt;如果该链表长度小于k，请返回一个长度为 0 的链表。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>JZ56 删除链表中重复的结点</title>
    <link href="https://klaus08.top/post/67d6fc0b.html"/>
    <id>https://klaus08.top/post/67d6fc0b.html</id>
    <published>2021-07-17T06:21:05.000Z</published>
    <updated>2021-07-17T06:21:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/fc533c45b73a41b0b44ccba763f866ef?tpId=13&amp;tqId=11209&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=cyc_github" target="_blank" rel="noopener">原题链接</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。</p><p>例如，</p><p>链表1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5 处理后为 1-&gt;2-&gt;5。<a id="more"></a></p><br><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：{1,2,3,3,4,4,5}</span><br><span class="line">返回值：{1,2,5}</span><br></pre></td></tr></tbody></table></figure><br><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>乍一看以为很简单的，但是做的过程还是遇到以下都问题：</p><ol><li>去除重复结点时会保留最后一个重复结点</li><li>更新链表后没办法保存，因为只创建一个cur进行操作，最后cur指向的是null。</li></ol><p>不过都已经得到了解决，主要思路就是创建一个附加头节点，然后再创建一个始终指向该节点的头节点，后面跟的都是不重复的结点，然后检测重复，如果重复，一直向下走到不相等的结点。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">deleteDuplication</span><span class="params">(ListNode pHead)</span> </span>{</span><br><span class="line">        ListNode cur = pHead;</span><br><span class="line">        ListNode pre = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        pre.next= <span class="keyword">null</span>;</span><br><span class="line">        ListNode res = pre;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">if</span>(cur.next != <span class="keyword">null</span> &amp;&amp; cur.val == cur.next.val){</span><br><span class="line">                <span class="keyword">int</span> tmp = cur.val;</span><br><span class="line">                <span class="keyword">while</span>(cur!= <span class="keyword">null</span> &amp;&amp; cur.val==tmp){</span><br><span class="line">                    cur = cur.next;</span><br><span class="line">                }</span><br><span class="line">                pre.next = cur;</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span>{</span><br><span class="line">                pre.next = cur;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">                pre = pre.next;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res.next;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/fc533c45b73a41b0b44ccba763f866ef?tpId=13&amp;amp;tqId=11209&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=/ta/coding-interviews&amp;amp;qru=/ta/coding-interviews/question-ranking&amp;amp;from=cyc_github&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。&lt;/p&gt;
&lt;p&gt;例如，&lt;/p&gt;
&lt;p&gt;链表1-&amp;gt;2-&amp;gt;3-&amp;gt;3-&amp;gt;4-&amp;gt;4-&amp;gt;5 处理后为 1-&amp;gt;2-&amp;gt;5。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>JZ3 从尾到头打印链表</title>
    <link href="https://klaus08.top/post/cfcb0e04.html"/>
    <id>https://klaus08.top/post/cfcb0e04.html</id>
    <published>2021-07-16T00:13:49.000Z</published>
    <updated>2021-07-16T00:13:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035?tpId=13&amp;tqId=11156&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=cyc_github" target="_blank" rel="noopener">原题链接</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>输入一个链表的头节点，按链表从尾到头的顺序返回每个节点的值（用数组返回）。<a id="more"></a></p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：{1,2,3}</span><br><span class="line">返回值：[3,2,1]</span><br></pre></td></tr></tbody></table></figure><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：{67,0,24,58}</span><br><span class="line">返回值：[58,24,0,67]</span><br></pre></td></tr></tbody></table></figure><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*    public class ListNode {</span></span><br><span class="line"><span class="comment">*        int val;</span></span><br><span class="line"><span class="comment">*        ListNode next = null;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*        ListNode(int val) {</span></span><br><span class="line"><span class="comment">*            this.val = val;</span></span><br><span class="line"><span class="comment">*        }</span></span><br><span class="line"><span class="comment">*    }</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>{</span><br><span class="line">        </span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (listNode!=<span class="keyword">null</span>){</span><br><span class="line">            arrayList.add(listNode.val);</span><br><span class="line">            listNode = listNode.next;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        Collections.reverse(arrayList);        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>{</span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (listNode == <span class="keyword">null</span>) <span class="keyword">return</span> arrayList;</span><br><span class="line">        arrayList = printListFromTailToHead(listNode.next);</span><br><span class="line">        arrayList.add(listNode.val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><h3 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反转链表</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035?tpId=13&amp;amp;tqId=11156&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=/ta/coding-interviews&amp;amp;qru=/ta/coding-interviews/question-ranking&amp;amp;from=cyc_github&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;输入一个链表的头节点，按链表从尾到头的顺序返回每个节点的值（用数组返回）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Java集合（五）</title>
    <link href="https://klaus08.top/post/de6e0210.html"/>
    <id>https://klaus08.top/post/de6e0210.html</id>
    <published>2021-07-15T07:08:42.000Z</published>
    <updated>2021-07-15T07:08:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h1><hr><p>Collections是一个可以操作Set、List、Map的工具类，对集合对象实现<strong>同步控制</strong>等方法。</p><p><strong>把数组转换为集合</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection c, T[])</span></span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p><strong>排序操作</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(List list)</span></span>;</span><br><span class="line"><span class="comment">//反转列表元素</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(List list)</span></span>;</span><br><span class="line"><span class="comment">//list元素随机排序</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(List list)</span></span>;</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(List list, Comprator c)</span></span>;</span><br><span class="line"><span class="comment">//用c的规则对list排序</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(List list, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line"><span class="comment">//交换list中下标为i、j的元素</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(List list, <span class="keyword">int</span> distance)</span></span>;</span><br><span class="line"><span class="comment">//将list的后distance个元素整体移动到前边，distance可以为负</span></span><br></pre></td></tr></tbody></table></figure><p><strong>查找替换</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(List list, Object key)</span></span>;</span><br><span class="line"><span class="comment">//查找key所在位置，前提是list已经有序</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Object <span class="title">max</span><span class="params">(Collection c)</span></span>;</span><br><span class="line"><span class="comment">//找出c中最大元素， 类似的有 static Object min(Collection c);</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Object <span class="title">max</span><span class="params">(Collection c, Comparator cmp)</span></span>;</span><br><span class="line"><span class="comment">//使用cmp进行比较找出最大元素， 类似有 static Object min(Collection c, Comparator cmp);</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">(List list, <span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="comment">//用i填充list</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexOfSubList</span><span class="params">(List sourse, List target)</span></span>;</span><br><span class="line"><span class="comment">//返回子list在父list中的索引</span></span><br></pre></td></tr></tbody></table></figure><p>下面是搜索子list的函数源码，</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexOfSubList</span><span class="params">(List&lt;?&gt; source, List&lt;?&gt; target)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> sourceSize = source.size();</span><br><span class="line">    <span class="keyword">int</span> targetSize = target.size();</span><br><span class="line">    <span class="keyword">int</span> maxCandidate = sourceSize - targetSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sourceSize &lt; INDEXOFSUBLIST_THRESHOLD ||</span><br><span class="line">        (source <span class="keyword">instanceof</span> RandomAccess&amp;&amp;target <span class="keyword">instanceof</span> RandomAccess)) {</span><br><span class="line">    nextCand:</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> candidate = <span class="number">0</span>; candidate &lt;= maxCandidate; candidate++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, j=candidate; i&lt;targetSize; i++, j++)</span><br><span class="line">                <span class="keyword">if</span> (!eq(target.get(i), source.get(j)))</span><br><span class="line">                    <span class="keyword">continue</span> nextCand;  <span class="comment">// Element mismatch, try next cand</span></span><br><span class="line">            <span class="keyword">return</span> candidate;  <span class="comment">// All elements of candidate matched target</span></span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {  <span class="comment">// Iterator version of above algorithm</span></span><br><span class="line">        ListIterator&lt;?&gt; si = source.listIterator();</span><br><span class="line">    nextCand:</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> candidate = <span class="number">0</span>; candidate &lt;= maxCandidate; candidate++) {</span><br><span class="line">            ListIterator&lt;?&gt; ti = target.listIterator();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;targetSize; i++) {</span><br><span class="line">                <span class="keyword">if</span> (!eq(ti.next(), si.next())) {</span><br><span class="line">                    <span class="comment">// Back up source iterator to next candidate</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++)</span><br><span class="line">                        si.previous();</span><br><span class="line">                    <span class="keyword">continue</span> nextCand;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> candidate;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">// No candidate matched the target</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>该函数使用暴力法求解的。source长度 - target长度就是maxCandidate，就是说，如果source中前maxCandidate个元素都没有匹配到target那么maxCandidate + 1及以后所有元素都没必要尝试匹配了，因为后面的长度已经小于target长度了。</p><p>然后有i、j两个标记元素，candidate作为起始 i 遍历source的起始下标，j 作为target的下标，他俩进行比对是否相等，如果不相等，candidate++，就是将source的其实下标向后移动以为，然后 j 重新指向target头部开始匹配；如果相等，i++ , j++，判断下一个字符是否相等，直到 j = target的长度，这时候return cnadidate就是字串所在下。如果一致没有匹配到，return -1表明不存在。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Collections&quot;&gt;&lt;a href=&quot;#Collections&quot; class=&quot;headerlink&quot; title=&quot;Collections&quot;&gt;&lt;/a&gt;Collections&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;Collections是一个可以操作Set、List、Map的工具类，对集合对象实现&lt;strong&gt;同步控制&lt;/strong&gt;等方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;把数组转换为集合&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Collection c, T[])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://klaus08.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://klaus08.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JZ43 左旋转字符串</title>
    <link href="https://klaus08.top/post/5f4eb573.html"/>
    <id>https://klaus08.top/post/5f4eb573.html</id>
    <published>2021-07-15T00:30:20.000Z</published>
    <updated>2021-07-15T00:30:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/12d959b108cb42b1ab72cef4d36af5ec?tpId=13&amp;tqId=11196&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=cyc_github" target="_blank" rel="noopener">原题链接</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><hr><p>汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列 S，请你把其循环左移 K 位后的序列输出（保证 K 小于等于 S 的长度）。例如，字符序列S=”abcXYZdef”,要求输出循环左移 3 位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！<a id="more"></a></p><br><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入："abcXYZdef",3</span><br><span class="line">返回值："XYZdefabc"</span><br></pre></td></tr></tbody></table></figure><br><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>又是偷懒了直接用了String(char[], int, int)的构造方法，然后return两个String相加即可。</p><p>然后，还是有这哥的双指针解法，<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/58.2%20%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.md" target="_blank" rel="noopener">点击查看</a>，顺着这个思路又写了解二。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="comment">//假设输入n是小于str.length()的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">LeftRotateString</span><span class="params">(String str,<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = str.length();</span><br><span class="line">        <span class="keyword">if</span> (len==<span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (n &gt;=len) <span class="keyword">return</span> str;</span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(chars, n, len-n ) + <span class="keyword">new</span> String(chars, <span class="number">0</span>, n);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="解二"><a href="#解二" class="headerlink" title="解二"></a>解二</h3><p>”abcXYZdef“转成”XYZdefabc”，就是在数组中把abc逆序，XYZdef逆序，然后整体逆序输出为字符串，</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">LeftRotateString</span><span class="params">(String str,<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = str.length();</span><br><span class="line">        <span class="keyword">if</span> (len==<span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (n &gt;=len|| n&lt;<span class="number">0</span>) <span class="keyword">return</span> str;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line"></span><br><span class="line">        reverse(chars, <span class="number">0</span>, n-<span class="number">1</span>);</span><br><span class="line">        reverse(chars, n, len-<span class="number">1</span>);</span><br><span class="line">        reverse(chars, <span class="number">0</span>, len -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span>[] chars, <span class="keyword">int</span> from, <span class="keyword">int</span> to)</span></span>{</span><br><span class="line">        <span class="keyword">while</span> (from&lt; to){</span><br><span class="line">            swap(chars, from++, to--);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">char</span>[] chars, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>{</span><br><span class="line">        <span class="keyword">char</span> tmp =chars[a];</span><br><span class="line">        chars[a] = chars[b];</span><br><span class="line">        chars[b] = tmp;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/12d959b108cb42b1ab72cef4d36af5ec?tpId=13&amp;amp;tqId=11196&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=/ta/coding-interviews&amp;amp;qru=/ta/coding-interviews/question-ranking&amp;amp;from=cyc_github&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列 S，请你把其循环左移 K 位后的序列输出（保证 K 小于等于 S 的长度）。例如，字符序列S=”abcXYZdef”,要求输出循环左移 3 位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>JZ44 翻转单词序列</title>
    <link href="https://klaus08.top/post/36bbd715.html"/>
    <id>https://klaus08.top/post/36bbd715.html</id>
    <published>2021-07-14T12:56:14.000Z</published>
    <updated>2021-07-14T12:56:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="nowcoder.com/practice/3194a4f4cf814f63919d0790578d51f3?tpId=13&amp;tqId=11197&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=cyc_github">原题链接</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><hr><p>牛客最近来了一个新员工Fish，每天早晨总是会拿着一本英文杂志，写些句子在本子上。同事Cat对Fish写的内容颇感兴趣，有一天他向Fish借来翻看，但却读不懂它的意思。例如，“nowcoder. a am I”。后来才意识到，这家伙原来把句子单词的顺序翻转了，正确的句子应该是“I am a nowcoder.”。Cat对一一的翻转这些单词顺序可不在行，你能帮助他么？<a id="more"></a></p><br><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><hr><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入："nowcoder. a am I"</span><br><span class="line">返回值："I am a nowcoder."</span><br></pre></td></tr></tbody></table></figure><br><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>看了这哥的，确实没想到。<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/58.1%20%E7%BF%BB%E8%BD%AC%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F%E5%88%97.md" target="_blank" rel="noopener">点击跳转</a></p><blockquote><p>先翻转每个单词，再翻转整个字符串。</p><p>题目应该有一个隐含条件，就是不能用额外的空间。虽然 Java 的题目输入参数为 String 类型，需要先创建一个字符数组使得空间复杂度为 O(N)，但是正确的参数类型应该和原书一样，为字符数组，并且只能使用该字符数组的空间。任何使用了额外空间的解法在面试时都会大打折扣，包括递归解法。</p></blockquote><p>我当时想，把传入的String转成char[]，创建一个等长的cahr类型的辅助数组，从原char[]尾部开始用双指针搜索单词，顺序加入到新建的数组中。</p><p>这个方法是不需要辅助数组，直接以单词为单位，把从头开始把所有单词逆序，然后再将整个数组逆序。</p><br><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">ReverseSentence</span><span class="params">(String str)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> n = str.length();</span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt;= n) {</span><br><span class="line">            <span class="keyword">if</span> (j == n || chars[j] == <span class="string">' '</span>) {</span><br><span class="line">                reverse(chars, i, j - <span class="number">1</span>);</span><br><span class="line">                i = j + <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">            j++;</span><br><span class="line">        }</span><br><span class="line">        reverse(chars, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span>[] c, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">            swap(c, i++, j--);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">char</span>[] c, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>{</span><br><span class="line">        <span class="keyword">char</span> t = c[i];</span><br><span class="line">        c[i] = c[j];</span><br><span class="line">        c[j] = t;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="补"><a href="#补" class="headerlink" title="补"></a>补</h2><p>下面是我根据这个思想自己写的代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.klaus.doublePoint.prob44;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">ReverseSentence</span><span class="params">(String str)</span> </span>{</span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> len = chars.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; len; i++){</span><br><span class="line">            <span class="keyword">if</span> (chars[i] != <span class="string">' '</span>) {<span class="comment">//防止第一个为' '</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; len; j++) {</span><br><span class="line">                    <span class="keyword">if</span> (chars[j] == <span class="string">' '</span>) {</span><br><span class="line">                        reverse(chars, i, j - <span class="number">1</span>);</span><br><span class="line">                        i = j;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    }<span class="keyword">else</span> <span class="keyword">if</span> (j == len -<span class="number">1</span>) {</span><br><span class="line">                        reverse(chars, i, j );</span><br><span class="line">                        i = j;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        reverse(chars, <span class="number">0</span>, len -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span>[] chars, <span class="keyword">int</span> from, <span class="keyword">int</span> to)</span></span>{</span><br><span class="line">        <span class="keyword">while</span> (from&lt; to){</span><br><span class="line">            swap(chars, from++, to--);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">char</span>[] chars, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>{</span><br><span class="line">        <span class="keyword">char</span> tmp =chars[a];</span><br><span class="line">        chars[a] = chars[b];</span><br><span class="line">        chars[b] = tmp;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="补2"><a href="#补2" class="headerlink" title="补2"></a>补2</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.klaus.doublePoint.prob44;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">ReverseSentence</span><span class="params">(String str)</span> </span>{</span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> len = chars.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; len; i++){</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= len; j++) {</span><br><span class="line">                <span class="keyword">if</span> (j == len || chars[j] == <span class="string">' '</span>) {</span><br><span class="line">                    reverse(chars, i, j - <span class="number">1</span>);</span><br><span class="line">                    i = j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        reverse(chars, <span class="number">0</span>, len -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span>[] chars, <span class="keyword">int</span> from, <span class="keyword">int</span> to)</span></span>{</span><br><span class="line">        <span class="keyword">while</span> (from&lt; to){</span><br><span class="line">            swap(chars, from++, to--);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">char</span>[] chars, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>{</span><br><span class="line">        <span class="keyword">char</span> tmp =chars[a];</span><br><span class="line">        chars[a] = chars[b];</span><br><span class="line">        chars[b] = tmp;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;nowcoder.com/practice/3194a4f4cf814f63919d0790578d51f3?tpId=13&amp;amp;tqId=11197&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=/ta/coding-interviews&amp;amp;qru=/ta/coding-interviews/question-ranking&amp;amp;from=cyc_github&quot;&gt;原题链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;牛客最近来了一个新员工Fish，每天早晨总是会拿着一本英文杂志，写些句子在本子上。同事Cat对Fish写的内容颇感兴趣，有一天他向Fish借来翻看，但却读不懂它的意思。例如，“nowcoder. a am I”。后来才意识到，这家伙原来把句子单词的顺序翻转了，正确的句子应该是“I am a nowcoder.”。Cat对一一的翻转这些单词顺序可不在行，你能帮助他么？&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>JZ41 和为S的连续正数序列</title>
    <link href="https://klaus08.top/post/22dc244.html"/>
    <id>https://klaus08.top/post/22dc244.html</id>
    <published>2021-07-14T02:00:04.000Z</published>
    <updated>2021-07-14T02:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/c451a3fd84b64cb19485dad758a55ebe?tpId=13&amp;tqId=11194&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=cyc_github" target="_blank" rel="noopener">原题链接</a></p><hr><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!<a id="more"></a></p><p><strong>返回值描述</strong></p><p>输出所有和为S的连续正数序列。序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序</p><br><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：9</span><br><span class="line">返回值：[[2,3,4],[4,5]]</span><br></pre></td></tr></tbody></table></figure><br><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一是进行穷举比较容易，但是没有用到<strong>连续序列</strong>的特征。</p><p>二是双指针，根据数学知识：结果序列中最大的数就是[n / 2] + 1，所以以此为尾指针的最大值；头指针从1开始。因为是连续序列所以求和公式是：（a<sub>m</sub>+a<sub>n</sub>) * (n - m + 1) / 2，比较求和结果是否等于sum，如果相等 ，把 i 到 j 之间的元素加入，然后尾指针不再递减，因为不会再出现头指针相同尾指针不同的序列使和为sum的序列了；如果和小于sum，那么头指针++，尾指针初始化到末尾重新开始；如果大于sum，尾指针–，进行检测。</p><br><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p><strong>解答一</strong>，穷举法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; FindContinuousSequence(<span class="keyword">int</span> sum) {</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (sum ==<span class="number">1</span>)<span class="keyword">return</span> res;</span><br><span class="line">        ArrayList&lt;Integer&gt; tmp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sum / <span class="number">2</span> + <span class="number">1</span>; i++) {</span><br><span class="line">            tmp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= sum / <span class="number">2</span> + <span class="number">1</span>; j++) {</span><br><span class="line">                <span class="keyword">if</span> (s &lt; sum) {</span><br><span class="line">                    s += j;</span><br><span class="line">                    tmp.add(j);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (s == sum)</span><br><span class="line">                res.add(tmp);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>解答二</strong>，双指针。</p><br><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="comment">//双指针</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; FindContinuousSequence(<span class="keyword">int</span> sum) {</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; arr;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;= sum /<span class="number">2</span>; i++){</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j= sum / <span class="number">2</span> + <span class="number">1</span>; j&gt;i; j--){</span><br><span class="line">                <span class="keyword">if</span> ((i+j)*(j-i+<span class="number">1</span>) /<span class="number">2</span> == sum){</span><br><span class="line">                    arr= <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                    <span class="keyword">int</span> tmp = i;</span><br><span class="line">                    <span class="keyword">while</span> (tmp&lt;=j)</span><br><span class="line">                        arr.add(tmp++);</span><br><span class="line">                    res.add(arr);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }<span class="keyword">else</span> <span class="keyword">if</span>((i+j)*(j-i+<span class="number">1</span>) /<span class="number">2</span> &lt; sum)</span><br><span class="line">                    <span class="keyword">break</span>;                </span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/c451a3fd84b64cb19485dad758a55ebe?tpId=13&amp;amp;tqId=11194&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=/ta/coding-interviews&amp;amp;qru=/ta/coding-interviews/question-ranking&amp;amp;from=cyc_github&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题链接&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>JZ42 和为S的两个数字</title>
    <link href="https://klaus08.top/post/70c25d5e.html"/>
    <id>https://klaus08.top/post/70c25d5e.html</id>
    <published>2021-07-14T00:46:44.000Z</published>
    <updated>2021-07-14T00:46:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/390da4f7a00f44bea7c2f3d19491311b?tpId=13&amp;tqId=11195&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=cyc_github" target="_blank" rel="noopener">原题链接</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，返回两个数的乘积最小的，如果无法找出这样的数字，返回一个空数组即可。<a id="more"></a></p><p><strong>返回值描述：</strong></p><p>对应每个测试案例，输出两个数，小的先输出。</p><br><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,2,4,7,11,15],15</span><br><span class="line">返回值：[4, 11]</span><br></pre></td></tr></tbody></table></figure><br><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>数组整体递增排序，然后又要求1. 多对数字的和等于S，返回两个数的乘积最小的，2. 输出两个数，小的先输出。</p><p>显然在和一定时，两个加数差距越大，乘积越小，也就是越在前面找到的和为S的数他们的积越小；而数字又是递增排序的，所以只需要存储从0开始遍历array 第一个与后面元素相加和为sum的 数 ，这个数就是所需结果中较小的一对，后面的就不需要再进行了，直接将这个数以及sum-这个数的差添加到arrayList返回，不需要额外空间保存符合条件的数。</p><br><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p><strong>解答一</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">FindNumbersWithSum</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> sum)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> len = array.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = len - <span class="number">1</span>; j &gt; i; j--) {</span><br><span class="line">                <span class="keyword">if</span> (array[i] + array[j] &gt; sum) {</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (array[i] + array[j] &lt; sum)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> {</span><br><span class="line">                    arrayList.add(array[i]);</span><br><span class="line">                    arrayList.add(sum - array[i]);</span><br><span class="line">                    <span class="keyword">return</span> arrayList;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }        </span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><p><strong>解答二</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">FindNumbersWithSum</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> sum)</span> </span>{</span><br><span class="line">        Vector&lt;Integer&gt; num1 = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = array.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len - <span class="number">1</span>; i++){</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = len-<span class="number">1</span>; j &gt; i; j--){</span><br><span class="line">                <span class="keyword">if</span> (array[i] + array[j] &gt; sum){</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (array[i] + array[j] &lt; sum)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> {</span><br><span class="line">                    num1.add(array[i]);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (num1.size()!=<span class="number">0</span>){</span><br><span class="line">            <span class="keyword">int</span> min = num1.get(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;num1.size();i++){</span><br><span class="line">                <span class="keyword">if</span> (num1.get(i) &lt; min)</span><br><span class="line">                    min = num1.get(i);</span><br><span class="line">            }</span><br><span class="line">            arrayList.add(min);</span><br><span class="line">            arrayList.add(sum - min);</span><br><span class="line">            <span class="keyword">return</span> arrayList;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>解答二是原程序，解答一是在写解题思路的时候有了更清楚的认识，然后进行了优化。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/390da4f7a00f44bea7c2f3d19491311b?tpId=13&amp;amp;tqId=11195&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=/ta/coding-interviews&amp;amp;qru=/ta/coding-interviews/question-ranking&amp;amp;from=cyc_github&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，返回两个数的乘积最小的，如果无法找出这样的数字，返回一个空数组即可。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>堆的使用</title>
    <link href="https://klaus08.top/post/6cd5927f.html"/>
    <id>https://klaus08.top/post/6cd5927f.html</id>
    <published>2021-07-13T08:49:55.000Z</published>
    <updated>2021-07-13T08:49:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>#</p><p>小根堆，根&lt;=左、右</p><p>大根堆，根&gt;=左、右</p><p>堆存储在数组中，i为下标从0开始：</p><ul><li><p>i &gt;= int ( n / 2 )，则 i 结点时叶结点</p></li><li><p>i=0，结点 i 是根节点；否则结点(int) [ ( i - 1 ) / 2 ]是 i 的父节点；</p></li><li><p>若2 * i + 1 &gt; n - 1，则 i 没有左孩子</p></li><li><p>若2 * i + 2 &lt; n - 1，则 i 没有右孩子</p><a id="more"></a></li></ul><h2 id="创建最小堆"><a href="#创建最小堆" class="headerlink" title="创建最小堆"></a>创建最小堆</h2><p>虽然堆是以数组形式存储，它的逻辑结构是树状的。</p><p>要将一个普通序列变成最小堆：</p><p><img src="https://gitee.com/man-ljw/PicBed/raw/master/QQMail_6.png" alt="">)<img src="https://gitee.com/man-ljw/PicBed/raw/master/QQMail_7.png" alt=""><br><img src="https://gitee.com/man-ljw/PicBed/raw/master/QQMail_8.png" alt=""></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.klaus.stackAndQueue.prob29;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkLeft</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> len)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * i + <span class="number">1</span> &lt; len;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkRight</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> len)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * i + <span class="number">2</span> &lt; len;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] minHeap(<span class="keyword">int</span>[] arr){</span><br><span class="line">        <span class="keyword">int</span> len = arr.length;</span><br><span class="line">        <span class="keyword">int</span> start = len/<span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &gt;<span class="number">0</span>; i--) {</span><br><span class="line">            <span class="keyword">int</span> left,right;</span><br><span class="line">            <span class="comment">//比左结点大</span></span><br><span class="line">            <span class="keyword">if</span> (checkLeft(i, len)){</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[<span class="number">2</span>*i+<span class="number">1</span>] ) {</span><br><span class="line">                    <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">                    arr[i] = arr[<span class="number">2</span> * i + <span class="number">1</span>];</span><br><span class="line">                    arr[<span class="number">2</span> * i + <span class="number">1</span>] = tmp;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//比右结点大</span></span><br><span class="line">            <span class="keyword">if</span> (checkRight(i, len)) {</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[<span class="number">2</span> * i + <span class="number">2</span>]) {</span><br><span class="line">                    <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">                    arr[i] = arr[<span class="number">2</span> * i + <span class="number">2</span>];</span><br><span class="line">                    arr[<span class="number">2</span> * i + <span class="number">2</span>] = tmp;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根</span></span><br><span class="line">        <span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (checkLeft(i, len) || checkRight(i, len)){</span><br><span class="line">            <span class="keyword">int</span> min = arr[i];</span><br><span class="line">            <span class="keyword">int</span> left=<span class="number">0</span>, right=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (checkLeft(i, len)){</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[<span class="number">2</span>*i +<span class="number">1</span>]) {</span><br><span class="line">                    min = arr[<span class="number">2</span> * i + <span class="number">1</span>];</span><br><span class="line">                    left =<span class="number">1</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (checkRight(i, len)){</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[<span class="number">2</span> * i + <span class="number">2</span>]) {</span><br><span class="line">                    <span class="keyword">if</span> (left == <span class="number">1</span> &amp;&amp; min&lt;arr[<span class="number">2</span> * i + <span class="number">2</span>]){}</span><br><span class="line">                    <span class="keyword">else</span> {</span><br><span class="line">                        min = arr[<span class="number">2</span> * i + <span class="number">2</span>];</span><br><span class="line">                        left=<span class="number">0</span>;</span><br><span class="line">                        right=<span class="number">1</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (left ==<span class="number">1</span>){</span><br><span class="line">                <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">                arr[i] = arr[<span class="number">2</span>*i+<span class="number">1</span>];</span><br><span class="line">                arr[<span class="number">2</span>*i+<span class="number">1</span>] = tmp;</span><br><span class="line">                i = <span class="number">2</span>*i+<span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (right == <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">                arr[i] = arr[<span class="number">2</span>*i+<span class="number">2</span>];</span><br><span class="line">                arr[<span class="number">2</span>*i+<span class="number">2</span>] = tmp;</span><br><span class="line">                i = <span class="number">2</span>*i+<span class="number">2</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> arr;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>[] arr = {<span class="number">53</span>, <span class="number">17</span>, <span class="number">78</span>, <span class="number">9</span>, <span class="number">45</span>, <span class="number">65</span>, <span class="number">87</span>, <span class="number">23</span>};</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] res = minHeap(arr);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : res)</span><br><span class="line">            System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#&lt;/p&gt;
&lt;p&gt;小根堆，根&amp;lt;=左、右&lt;/p&gt;
&lt;p&gt;大根堆，根&amp;gt;=左、右&lt;/p&gt;
&lt;p&gt;堆存储在数组中，i为下标从0开始：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;i &amp;gt;= int ( n / 2 )，则 i 结点时叶结点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;i=0，结点 i 是根节点；否则结点(int) [ ( i - 1 ) / 2 ]是 i 的父节点；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若2 * i + 1 &amp;gt; n - 1，则 i 没有左孩子&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若2 * i + 2 &amp;lt; n - 1，则 i 没有右孩子&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JZ64 滑动窗口的最大值</title>
    <link href="https://klaus08.top/post/6aa97155.html"/>
    <id>https://klaus08.top/post/6aa97155.html</id>
    <published>2021-07-13T00:58:50.000Z</published>
    <updated>2021-07-13T00:58:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/1624bc35a45c42c0bc17d17fa0cba788?tpId=13&amp;tqId=11217&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=cyc_github" target="_blank" rel="noopener">原题链接</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。</p><p>例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。</p><p>窗口大于数组长度的时候，返回空。</p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[2,3,4,2,6,2,5,1],3</span><br><span class="line">返回值：[4,4,6,6,6,5]</span><br></pre></td></tr></tbody></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>最后的返回空是[]不是null。</p><p>又要用到堆，可是我还没学😓</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">maxInWindows</span><span class="params">(<span class="keyword">int</span> [] num, <span class="keyword">int</span> size)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = num.length;</span><br><span class="line">        <span class="keyword">if</span>(size&gt;len || len==<span class="number">0</span>||size ==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Integer&gt;(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[size];<span class="comment">//存储窗口元素</span></span><br><span class="line">        </span><br><span class="line">        ArrayList&lt;Integer&gt; arr= <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">0</span>;i &lt; len+<span class="number">1</span> -size;i++){</span><br><span class="line">            <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt; size;j++){</span><br><span class="line">                tmp[j] = num[i+j];</span><br><span class="line">                <span class="keyword">if</span>(tmp[j] &gt; max)</span><br><span class="line">                    max = tmp[j];</span><br><span class="line">            }</span><br><span class="line">            arr.add(max);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/1624bc35a45c42c0bc17d17fa0cba788?tpId=13&amp;amp;tqId=11217&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=/ta/coding
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>JZ63 数据流中的中位数</title>
    <link href="https://klaus08.top/post/6b3afdd4.html"/>
    <id>https://klaus08.top/post/6b3afdd4.html</id>
    <published>2021-07-12T12:43:14.000Z</published>
    <updated>2021-07-12T12:43:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/9be0172896bd43948f8a32fb954e1be1?tpId=13&amp;&amp;tqId=11216&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">原题链接</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。我们使用Insert()方法读取数据流，使用GetMedian()方法获取当前读取数据的中位数。<a id="more"></a></p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[5,2,3,4,1,6,7,0,8]</span><br><span class="line">返回值："5.00 3.50 3.00 3.50 3.00 3.50 4.00 3.50 4.00 "</span><br><span class="line">说明：数据流里面不断吐出的是5,2,3...,则得到的平均数分别为5,(5+2)/2,3...</span><br></pre></td></tr></tbody></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题看示例反而看得更迷糊了。简单的叙述一下就是：这里会动态的插入若干数值，然后会边插边求中位数。</p><p>目前我能想到两种方法。一是用数组存储插入的数值，然后进行排序挑选中位数；二是<strong>插入排序</strong>，最后GetMedian()部分只需要根据奇偶个数返回中位数就可以了。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    Vector&lt;Integer&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(Integer num)</span> </span>{</span><br><span class="line">        vector.add(num);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">GetMedian</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = vector.size();</span><br><span class="line">        Collections.sort(vector);</span><br><span class="line">        <span class="keyword">if</span>(len%<span class="number">2</span> == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">double</span> res = ((<span class="keyword">double</span>)vector.get(len / <span class="number">2</span>) + (<span class="keyword">double</span>)vector.get(len / <span class="number">2</span> - <span class="number">1</span>))/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">double</span> res =(<span class="keyword">double</span>) vector.get(len / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里提醒自己，太久没碰java以至于原来写出来<code>double res = (vector.get(len / 2) + vector.get(len / 2 - 1))/2;</code>这样的代码，最后返回的总是一个整数。就是那个折磨，，法二明天写吧。</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>利用ArrayList作为容器进行插入排序。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(Integer num)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (arrayList.isEmpty())</span><br><span class="line">            arrayList.add(num);</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            Iterator iterator = arrayList.iterator();</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()){</span><br><span class="line">                <span class="keyword">if</span> (num &gt; (Integer) iterator.next()) {</span><br><span class="line">                    index++;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            arrayList.add(index, num);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">GetMedian</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">int</span> len = arrayList.size();</span><br><span class="line">        <span class="keyword">if</span> ((len&amp;<span class="number">1</span>)==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> ((<span class="keyword">double</span>)arrayList.get(len/<span class="number">2</span>) + (<span class="keyword">double</span>) arrayList.get(len/ <span class="number">2</span> -<span class="number">1</span>))/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>)arrayList.get(len/<span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/9be0172896bd43948f8a32fb954e1be1?tpId=13&amp;amp;&amp;amp;tqId=11216&amp;amp;rp=1&amp;amp;ru=/ta/coding-interviews&amp;amp;qru=/ta/coding-interviews/question-ranking&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。我们使用Insert()方法读取数据流，使用GetMedian()方法获取当前读取数据的中位数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>==和equals()方法的区别</title>
    <link href="https://klaus08.top/post/7e168472.html"/>
    <id>https://klaus08.top/post/7e168472.html</id>
    <published>2021-07-12T09:39:39.000Z</published>
    <updated>2021-07-12T09:39:39.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    String a = <span class="string">"a"</span>;</span><br><span class="line">    String b = <span class="keyword">new</span> String(<span class="string">"a"</span>);</span><br><span class="line">    String c = <span class="keyword">new</span> String(<span class="string">"a"</span>);</span><br><span class="line">    String d =c;</span><br><span class="line"></span><br><span class="line">    System.out.println(a==b);<span class="comment">//false</span></span><br><span class="line">    System.out.println(a.equals(b));<span class="comment">//true</span></span><br><span class="line">    System.out.println(b==c);<span class="comment">//false</span></span><br><span class="line">    System.out.println(b.equals(c));<span class="comment">//true</span></span><br><span class="line">    System.out.println(c==d);<span class="comment">//true</span></span><br><span class="line">    System.out.println(c.equals(d));<span class="comment">//true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>个人理解，==就是直接判断两个变量指示的值是否相等，对普通变量而言足够了，但是java中还有一种变量叫做<strong>引用变量</strong>，对一个String类型的引用变量b来说，a直接指向了“a”，而b指向的是new出来的String对象所在的<strong>地址</strong>，直接使用==比较就相当于拿”a”和一串内存地址作比较，所以a==b是false。而equals()方法则会根据地址，找到地址指向的内容，然后进行比较。</p><p>然后直接的<code>String d =c;</code>是个浅拷贝。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span
      
    
    </summary>
    
    
      <category term="Java" scheme="https://klaus08.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://klaus08.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java集合（四）</title>
    <link href="https://klaus08.top/post/b1f0c757.html"/>
    <id>https://klaus08.top/post/b1f0c757.html</id>
    <published>2021-07-12T08:17:00.000Z</published>
    <updated>2021-07-12T08:17:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><hr><p>Map系：粗线框代表接口。</p><p><img src="https://gitee.com/man-ljw/PicBed/raw/master/newMap.png" alt=""></p><a id="more"></a><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><hr><p>几乎所有实体类都继承了AbstractMap，唯独Hashtable没有，它也是唯一线程安全的。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractMap使实现了Map接口的抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>{}</span><br><span class="line"></span><br><span class="line"><span class="comment">//Hashtable没有继承AbstractMap</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hashtable</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">Dictionary</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializab</span></span>{}</span><br><span class="line"></span><br><span class="line"><span class="comment">//WeakHashMap继承了AbstractMap</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeakHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//EnumMap继承了AbstractMap</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumMap</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">K</span>&gt;, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//<span class="title">IdentityHashMap</span>继承了<span class="title">AbstractMap</span>  </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">IdentityHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Cloneable</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//<span class="title">TreeMap</span>继承了<span class="title">AbstractMap</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TreeMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">NavigableMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>{}</span><br></pre></td></tr></tbody></table></figure><br><h2 id="基本概述"><a href="#基本概述" class="headerlink" title="基本概述"></a>基本概述</h2><hr><p>每一个Map元素包括两个值，一个是key另一个是value，二者存在映射关系，也就是可以通过key索引得到唯一对应的value。所以Map中<strong>key不允许重复</strong>，key的相等与否通过<code>equals()</code>方法确定，key和value都是任何引用类型的数据。</p><p>Map中的key在一起就组成了一个Set集合（无序、不重复），并且Map提供了keySet()方法，用于返回所有key组成的Set集合。</p><p>Map和Set有很多相似的地方，如果把Map中存储的Key-Value对称一个变量，并且value是key的附庸，key在哪里valuse就在哪里的话，Map和Set就没有什么区别了。而如果把所有的value放在一起来看，Map又像是一个List（可重复，key看作索引）。</p><br><h2 id="提供的方法"><a href="#提供的方法" class="headerlink" title="提供的方法"></a>提供的方法</h2><hr><table><thead><tr><th align="center">方法</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">void  clear()</td><td align="center">清空Map</td></tr><tr><td align="center">booelan containsKey(Object key)</td><td align="center"></td></tr><tr><td align="center">booelan containsValue(Object key)</td><td align="center"></td></tr><tr><td align="center">Set entrySet()</td><td align="center">返回key-value对组成的Set集合；</td></tr><tr><td align="center">Object get(Object key)</td><td align="center">获取key对应的value，不存在则返回null</td></tr><tr><td align="center">boolean isEmpty()</td><td align="center"></td></tr><tr><td align="center">Set keySet()</td><td align="center">返回所有key组成的Set集合</td></tr><tr><td align="center">Object put(Object key, Object value)</td><td align="center">添加一对值，如果已有key相同的，覆盖</td></tr><tr><td align="center">void putAll(Map m)</td><td align="center">将m中的全部kv对复制到本map中</td></tr><tr><td align="center">Object remove(Objecct key)</td><td align="center">删除kv对，返回value，key不存在返回null</td></tr><tr><td align="center">int size()</td><td align="center"></td></tr><tr><td align="center">Collection values()</td><td align="center">返回该map中所有value组成的Collection</td></tr></tbody></table><p>Map中包含一个内部类：Entry，封装了key-value对。有以下三个方法：</p><p>getKey(), getValue() 以及setValue()。</p><br><h2 id="HaspMap"><a href="#HaspMap" class="headerlink" title="HaspMap"></a>HaspMap</h2><hr><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p>HashMap内部数据结构：数组+单链表。</p><p>数组为了索引访问，单链表为了HashCode相等但是equals返回false的问题。（和HashSet很像）</p><p>如下图：（<a href="https://github.com/CyC2018/CS-Notes" target="_blank" rel="noopener">图源</a>）</p><p>table[0] 指定用于存储key = null的键值对。</p><p>数组的容量一定是2^n^，即使在创建时传入的参数不是2^n^HashMap也会将其向上转换。</p><p><img src="https://gitee.com/man-ljw/PicBed/raw/master/HashMap%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.jpg" alt=""></p><h3 id="插入及扩容"><a href="#插入及扩容" class="headerlink" title="插入及扩容"></a>插入及扩容</h3><p>创建HashMap的默认大小是16。在向HashMap添加kv对时，和HashSet一样，hashCode决定下标。</p><p>数组中的每一个位置被称作一个<strong>桶</strong>，桶中除了存放key，value外，还有自己的哈希值以及一个链表Entry。同一个链表中存放<strong>哈希值</strong>和<strong>散列桶</strong>取模运算(就是hashCode%capacity)结果相同的 Entry。如果HashCode相同，equals返回false时，新来的元素会被放置到对应桶中并插在原元素之前，也就是说，这里的链表插入方法在 JDK1.7用的是头插法，而JDK1.8及之后使用的都是尾插法。。<font style="color:red">数组长度大于64，并且一个桶存储的链表长度大于等于 8 时会将链表转换为红黑树</font>。</p><p>设 HashMap 的 table 长度为 M，需要存储的键值对数量为 N，如果哈希函数满足均匀性的要求，那么每条链表的长度大约为 N/M，因此查找的复杂度为 O(N/M)。为了让查找的成本降低，应该使 N/M 尽可能小，因此需要保证 M 尽可能大，也就是说 table 要尽可能大。HashMap 采用动态扩容来根据当前的 N 值来调整 M 值，使得空间效率和时间效率都能得到保证。</p><p>HashMap的扩容有些特殊，一般容器是装满了才进行扩容，但HashMap不是。它有一个<code>LOAD_FACTOR</code>就是装载因子（小于1）来限制HashMap的装载量（maxLoad = capacity * LOAD_FACTOR），也就是说它里面的元素个数是达不到最大容量的。具体原因参考了<a href="https://blog.csdn.net/q85647842" target="_blank" rel="noopener">躺沙滩上等死的博文</a>。</p><p>在需要扩容时默认扩容后是原来的<font style="color:red">2倍</font>，然后将旧容器的所有键值对重新插入新容器。</p><br><h2 id="HashMap和Hashtable"><a href="#HashMap和Hashtable" class="headerlink" title="HashMap和Hashtable"></a>HashMap和Hashtable</h2><hr><p>二者都是Map的实现类，区别主要是：</p><ol><li>Hashtable是一个**线程安全的Map实现，而HashMap是线程不安全的；所以HashMap性能会高一点。</li><li>Hashtable不允许使用null作为key或value，但HashMap允许。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.klaus.maps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Map&lt;Integer,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        System.out.println(map.put(<span class="number">1</span>, <span class="string">"a"</span>)); <span class="comment">// null</span></span><br><span class="line">        System.out.println(map.put(<span class="number">2</span>, <span class="string">"b"</span>));<span class="comment">// null</span></span><br><span class="line">        System.out.println(map.put(<span class="number">1</span>, <span class="string">"x"</span>));<span class="comment">// a</span></span><br><span class="line"></span><br><span class="line">        System.out.println(map);<span class="comment">// {1=x, 2=b}</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注释的内容是输出结果，正常添加是返回的都是null，而在添加失败时<font style="color:red">返回key已对应value</font>。</p><h3 id="HashMap的迭代方法"><a href="#HashMap的迭代方法" class="headerlink" title="HashMap的迭代方法"></a>HashMap的迭代方法</h3><p>Map接口并没有获取Iterator的方法，并且Iterator只适用于Collection，所以说只能获取key的Set集合然后再调用iterator()方法获得迭代器。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取迭代器</span></span><br><span class="line">Iterator&lt;String&gt; iterator = map.keySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()){</span><br><span class="line">    System.out.println(map.get(iterator.next()));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="判等原则"><a href="#判等原则" class="headerlink" title="判等原则"></a>判等原则</h3><p>HashMap和Hashtable都是<font style="color:red">只根据equals()的返回结果来去确定</font></p><p>自定义类做key的时候，如果重写equals()和hashCode()方法，就应该保证equals()的结果和hashCode()的结果是一致的，即：equals()返回true时，hashCode()的值应该相等。</p><p>对比hashSet，判等不仅要求equals()返回true，还要hashCode()相等。</p><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><p>这是HashMap的子类，与LinkedHashSet类似，它也是用<strong>双向链表</strong>维护Map，可以记住添加顺序。</p><h3 id="IdentityHashMap"><a href="#IdentityHashMap" class="headerlink" title="IdentityHashMap"></a>IdentityHashMap</h3><p>判等方法不同，IdentityHashMap根据==结果判断。</p><br><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><hr><p>TreeMap实现了Map接口的子接口SortedMap，本身是一个<font style="color:red"> 红黑树</font>，每一个键值对是树上的一个结点。TreeMap插入结点时会根据key进行排序。和TreeSet类似，排序同样有自然排序、定制排序两种。</p><ul><li>自然排序：所有key必须实现Comparable接口，并且key应该时同一个类的对象</li><li>定制排序：创建TreeMap时传入Comparator对象。</li></ul><h3 id="判等规则"><a href="#判等规则" class="headerlink" title="判等规则"></a>判等规则</h3><p>key通过compareTo()方法比较返回0，则相等。</p><p>自定义类做key的时候，应该重写equals()和compareTo()方法，保证equals()的返回true时compareTo()的结果是0。</p><h3 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**** 最大最小值 ****/</span></span><br><span class="line"><span class="comment">//返回key最小的键值对</span></span><br><span class="line">Map.<span class="function">Entry <span class="title">firstEntry</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//返回最小键值</span></span><br><span class="line"><span class="function">Object <span class="title">firstKey</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//返回key最大的键值对</span></span><br><span class="line">Map.<span class="function">Entry <span class="title">lastEntry</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//返回最大键值</span></span><br><span class="line"><span class="function">Object <span class="title">lastKey</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**** 大于某一key的最小值，小于某一key的最大值 ****/</span></span><br><span class="line"><span class="comment">//返回键值大于key的最小Entry</span></span><br><span class="line">Map.<span class="function">Entry <span class="title">higherEntry</span><span class="params">(Object key)</span></span>;</span><br><span class="line"><span class="comment">//返回键值大于key的最小key</span></span><br><span class="line"><span class="function">Object <span class="title">higherKey</span><span class="params">(Object key)</span></span>;</span><br><span class="line"><span class="comment">//对应的lower一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**** 子Map ****/</span></span><br><span class="line"><span class="function">NavigableMap <span class="title">subMap</span><span class="params">(Object fromKey, <span class="keyword">boolean</span> fromInclusive, Object toKey, <span class="keyword">boolean</span> toInclusive)</span></span>;</span><br><span class="line"><span class="comment">//返回子Map，键值从fromKey到toKey，是否包含这两个边界元素取决于对应的boolean参数</span></span><br><span class="line"><span class="function">SortedMap <span class="title">subMap</span><span class="params">(Object fromKey, Object toKey)</span></span>;</span><br><span class="line"><span class="comment">//返回子Map，Key属于[fromKey, toKey)</span></span><br><span class="line"><span class="function">SortedMap <span class="title">tailMap</span><span class="params">(Object fromKey)</span></span>;</span><br><span class="line"><span class="comment">//返回子Map，key的范围大于fromKey</span></span><br></pre></td></tr></tbody></table></figure><br><h2 id="WeakHashMap"><a href="#WeakHashMap" class="headerlink" title="WeakHashMap"></a>WeakHashMap</h2><hr><blockquote><p>HashMap的key保留了堆实际对象的<strong>强引用类型</strong>，这意味着只要该HashMap对象不被删除，key引用的对象就不会被回收，HashMap也不会自动清理这些键值对；而WeakHashMap保留的是弱引用，只要WeakHashMap对象中key引用的对象不被强引用变量引用，那这些key所引用的对象可能被垃圾回收，WeakHashMap也可能自动删除key对应的键值对。</p><p>—《疯狂Java讲义 第2版》</p></blockquote><p>例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.klaus.maps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.WeakHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeakHashMapTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        WeakHashMap&lt;String , String&gt; whm = <span class="keyword">new</span> WeakHashMap&lt;&gt;();</span><br><span class="line">        whm.put(<span class="keyword">new</span> String(<span class="string">"语文"</span>), <span class="keyword">new</span> String(<span class="string">"良好"</span>));</span><br><span class="line">        whm.put(<span class="keyword">new</span> String(<span class="string">"数学"</span>), <span class="keyword">new</span> String(<span class="string">"一般"</span>));</span><br><span class="line">        whm.put(<span class="string">"Java"</span>, <span class="keyword">new</span> String(<span class="string">"良好"</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(whm);</span><br><span class="line">        System.gc();</span><br><span class="line">        System.runFinalization();</span><br><span class="line">        System.out.println(whm);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>它的输出是</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">{Java=良好, 数学=一般, 语文=良好}</span><br><span class="line">{Java=良好}</span><br></pre></td></tr></tbody></table></figure><p>因为“Java”的添加方式是key作为<strong>字符串直接量</strong>，垃圾回收时不会回收它。</p><p>WeakHashMap 主要用来实现缓存，Tomcat 中的 ConcurrentCache 使用了 WeakHashMap 来实现缓存功能。</p><h1 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h1><p>HashMap略快与Hashtable；</p><p>TreeMap通常慢于上面的，尤其在增、删时（因为采用红黑树）；</p><p>LinkedHashMap比HashMap慢，因为需要维护链表保持添加顺序，使用==判等0。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Map&quot;&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;Map系：粗线框代表接口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/man-ljw/PicBed/raw/master/newMap.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://klaus08.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://klaus08.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JZ29 最小的K个数</title>
    <link href="https://klaus08.top/post/35b4acc4.html"/>
    <id>https://klaus08.top/post/35b4acc4.html</id>
    <published>2021-07-12T02:01:59.000Z</published>
    <updated>2021-07-12T02:01:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/6a296eb82cf844ca8539b57c23e6e9bf?tpId=13&amp;&amp;tqId=11182&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">原题链接</a></p><br><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><hr><p>给定一个数组，找出其中最小的K个数。例如数组元素是4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4。</p><p>0 &lt;= k &lt;= input.length &lt;= 10000；</p><p>0 &lt;= input[i] &lt;= 10000。</p><a id="more"></a><br><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[4,5,1,6,2,7,3,8],4 </span><br><span class="line">返回值：[1,2,3,4]</span><br><span class="line">说明：返回最小的4个数即可，返回[1,3,2,4]也可以</span><br></pre></td></tr></tbody></table></figure><br><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[1], 0</span><br><span class="line">返回值：[]</span><br></pre></td></tr></tbody></table></figure><br><h2 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[0,1,2,1,2],3</span><br><span class="line">返回值：[0,1,1]</span><br></pre></td></tr></tbody></table></figure><br><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一、最简单的办法，把input[]元素全部插入PriorityQueue中进行自动排序，然后k次poll()出队首元素，这样时间复杂度是。</p><p>二、用<strong>堆</strong>的方法</p><p>三、分治。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="一、简单"><a href="#一、简单" class="headerlink" title="一、简单"></a>一、简单</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">GetLeastNumbers_Solution</span><span class="params">(<span class="keyword">int</span> [] input, <span class="keyword">int</span> k)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(input.length==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">0</span>);</span><br><span class="line">        PriorityQueue&lt;Integer&gt; priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(input.length);</span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;input.length;i++){</span><br><span class="line">            priorityQueue.add(input[i]);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++){</span><br><span class="line">            arrayList.add(priorityQueue.poll());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>[] arr = {<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">8</span>};</span><br><span class="line"></span><br><span class="line">        System.out.println(GetLeastNumbers_Solution(arr, <span class="number">4</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><h3 id="二、堆"><a href="#二、堆" class="headerlink" title="二、堆"></a>二、堆</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">还没写。</span><br></pre></td></tr></tbody></table></figure><br><h3 id="三、分治"><a href="#三、分治" class="headerlink" title="三、分治"></a>三、分治</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">没写。</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line">public class Solution {</span><br><span class="line">    public static ArrayList&lt;Integer&gt; GetLeastNumbers_Solution(int[] nums, int k) {</span><br><span class="line">        ArrayList&lt;Integer&gt; ret = new ArrayList&lt;&gt;();</span><br><span class="line">        if (k &gt; nums.length || k &lt;= 0)</span><br><span class="line">            return ret;</span><br><span class="line">        findKthSmallest(nums, k - 1);</span><br><span class="line">        /* findKthSmallest 会改变数组，使得前 k 个数都是最小的 k 个数 */</span><br><span class="line">        for (int i = 0; i &lt; k; i++)</span><br><span class="line">            ret.add(nums[i]);</span><br><span class="line">        return ret;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public static void findKthSmallest(int[] nums, int k) {</span><br><span class="line">        int l = 0, h = nums.length - 1;</span><br><span class="line">        while (l &lt; h) {</span><br><span class="line">            int j = partition(nums, l, h);</span><br><span class="line">            if (j == k)</span><br><span class="line">                break;</span><br><span class="line">            if (j &gt; k)</span><br><span class="line">                h = j - 1;</span><br><span class="line">            else</span><br><span class="line">                l = j + 1;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    private static int partition(int[] nums, int l, int h) {</span><br><span class="line">        int p = nums[l];     /* 切分元素 */</span><br><span class="line">        int i = l, j = h + 1;</span><br><span class="line">        while (true) {</span><br><span class="line">            while (i != h &amp;&amp; nums[++i] &lt; p) ;</span><br><span class="line">            while (j != l &amp;&amp; nums[--j] &gt; p) ;</span><br><span class="line">            if (i &gt;= j)</span><br><span class="line">                break;</span><br><span class="line">            swap(nums, i, j);</span><br><span class="line">        }</span><br><span class="line">        swap(nums, l, j);</span><br><span class="line">        return j;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    private static void swap(int[] nums, int i, int j) {</span><br><span class="line">        int t = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = t;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/6a296eb82cf844ca8539b57c23e6e9bf?tpId=13&amp;amp;&amp;amp;tqId=11182&amp;amp;rp=1&amp;amp;ru=/ta/coding-interviews&amp;amp;qru=/ta/coding-interviews/question-ranking&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题链接&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;给定一个数组，找出其中最小的K个数。例如数组元素是4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4。&lt;/p&gt;
&lt;p&gt;0 &amp;lt;= k &amp;lt;= input.length &amp;lt;= 10000；&lt;/p&gt;
&lt;p&gt;0 &amp;lt;= input[i] &amp;lt;= 10000。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Java集合（三）</title>
    <link href="https://klaus08.top/post/6ddde32.html"/>
    <id>https://klaus08.top/post/6ddde32.html</id>
    <published>2021-07-11T09:01:30.000Z</published>
    <updated>2021-07-11T09:01:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Queue集合"><a href="#Queue集合" class="headerlink" title="Queue集合"></a>Queue集合</h1><hr><p>Queue接口及其子系：</p><p><img src="https://gitee.com/man-ljw/PicBed/raw/master/QQ%E6%88%AA%E5%9B%BE20210711172706.jpg" alt=""></p><a id="more"></a><p><strong>常用方法：</strong></p><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>void add(Object o)</code></td><td align="center">将指定元素添加到队尾，通过调用offer(Object o)，<font style="color: red">非空</font></td></tr><tr><td align="center"><code>Object element()</code></td><td align="center">获取队列头部元素，但不删除</td></tr><tr><td align="center"><code>boolean offer(Object)</code></td><td align="center">将指定元素添加到队尾。<br>容量有限时，此方法更好。</td></tr><tr><td align="center"><code>Object peek()</code></td><td align="center">获取头部元素，但不删除</td></tr><tr><td align="center"><code>Object poll()</code></td><td align="center">获取头部元素，<font style="color: red">并删除</font></td></tr><tr><td align="center"><code>Object remove()</code></td><td align="center">获取头部元素，<font style="color: red">并删除</font></td></tr></tbody></table><br><h2 id="PriorityQueue实现类"><a href="#PriorityQueue实现类" class="headerlink" title="PriorityQueue实现类"></a>PriorityQueue实现类</h2><hr><p>并不是绝对标准的队列实现：插入元素会进行<font style="color: red">排序</font>，队列中保存的顺序按照<strong>队列中元素的大小</strong>，所以<code>poll()</code>或者<code>peek()</code>得到的是最小元素。也就是说PriorityQueue并不遵循<strong>FIFO</strong>。</p><p><strong>不允许插入null元素。</strong></p><p>排序也有两种方法：自然排序和定制排序。（想到了TreeSet）</p><h3 id="自然排序"><a href="#自然排序" class="headerlink" title="自然排序"></a>自然排序</h3><p>插入到PriorityQueue的元素都必须实现了<strong>comparable</strong>接口。</p><h3 id="定制排序"><a href="#定制排序" class="headerlink" title="定制排序"></a>定制排序</h3><p>创建PriorityQueue时传入<strong>comparator</strong>对象。</p><br><h2 id="Deque接口"><a href="#Deque接口" class="headerlink" title="Deque接口"></a>Deque接口</h2><hr><p>Deque是Queue接口的子接口，代表一个<strong>双端队列</strong>。</p><p>默认长度是16，每次扩容<font style="color: red">2倍</font>。</p><h3 id="ArrayDeque实现类"><a href="#ArrayDeque实现类" class="headerlink" title="ArrayDeque实现类"></a>ArrayDeque实现类</h3><p>是一个基于数组实现的双端队列。</p><p><strong>特有方法：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span></span>;<span class="comment">//删除并返回头部元素，通过removeFirst函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span></span>;<span class="comment">//删除头部元素并返回</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span></span>;<span class="comment">//删除尾部元素并返回</span></span><br></pre></td></tr></tbody></table></figure><p><strong>ArrayDeque</strong>的功能和Stack类似，但性能比Stack更优秀。</p><br><h2 id="LinkedList实现类"><a href="#LinkedList实现类" class="headerlink" title="LinkedList实现类"></a>LinkedList实现类</h2><hr><p>LinkedList是List接口的实现类，所i有可以通过索引访问。此外还实现了Deque接口，因此可以当作双端口队列来使用—&gt;”栈“。</p><p>对比前面的ArrayList，基于双向链表实现，他俩的区别就是数组和链表的区别：</p><p>ArrayList可以随机访问 ，但是插入删除的代价很高。</p><p>LinkedList可以轻松的完成插入删除的工作，但不支持随机访问。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Queue集合&quot;&gt;&lt;a href=&quot;#Queue集合&quot; class=&quot;headerlink&quot; title=&quot;Queue集合&quot;&gt;&lt;/a&gt;Queue集合&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;Queue接口及其子系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/man-ljw/PicBed/raw/master/QQ%E6%88%AA%E5%9B%BE20210711172706.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://klaus08.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://klaus08.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JZ21 栈的压入、弹出序列</title>
    <link href="https://klaus08.top/post/8e4b09f7.html"/>
    <id>https://klaus08.top/post/8e4b09f7.html</id>
    <published>2021-07-11T07:41:31.000Z</published>
    <updated>2021-07-11T07:41:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/d77d11405cc7470d82554cb392585106?tpId=13&amp;tqId=11174&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=cyc_github" target="_blank" rel="noopener">原题链接</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><hr><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）<a id="more"></a></p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><hr><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,2,3,4,5],[4,3,5,1,2]</span><br><span class="line"></span><br><span class="line">返回值：false</span><br></pre></td></tr></tbody></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><hr><p>用一个栈模拟这个过程。</p><p>① 将pushA的第一个未入栈的元素入栈，然后判断栈顶元素是不是popA的第一个元素。</p><p>② 如果不是，则继续将pushA的下一个元素压入栈中，回到①；</p><p>③ 如果是，栈中元素出栈，回到①。</p><p>直到pushA所有元素都入栈。</p><p>最后判断栈中是否还有元素，没有的话说明出栈序列合法。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><hr><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">IsPopOrder</span><span class="params">(<span class="keyword">int</span> [] pushA,<span class="keyword">int</span> [] popA)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(pushA.length != popA.length||</span><br><span class="line">          pushA.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j : pushA){</span><br><span class="line">            stack.push(pushA[j]);</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; stack.peek() == popA[i]){</span><br><span class="line">                stack.pop();</span><br><span class="line">                i++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/d77d11405cc7470d82554cb392585106?tpId=13&amp;amp;tqId=11174&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=/ta/coding-interviews&amp;amp;qru=/ta/coding-interviews/question-ranking&amp;amp;from=cyc_github&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Vector补充</title>
    <link href="https://klaus08.top/post/d5599252.html"/>
    <id>https://klaus08.top/post/d5599252.html</id>
    <published>2021-07-11T04:51:57.000Z</published>
    <updated>2021-07-11T04:51:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>前面只说了vector是线程安全的。下面是对其部分源码的解读。</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><hr><p><img src="https://gitee.com/man-ljw/PicBed/raw/master/image-20210711125545819.png" alt=""></p><ol><li><p>Vector(int initialCapacity, int capacityIncrement)</p><p>initialCapacity是Vector初始长度，capacityIncrement是在当前长度不够进行扩容时的扩容长度。</p></li><li><p>Vector(int)<br>只声明了初始长度，capacityIncrement是0。</p></li><li><p>Vector()<br>默认长度是10。</p></li><li><p>Vector(Collection )</p><p>将Collection转为Vector。</p></li></ol><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><hr><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>{</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用<code>synchronized</code>进行同步，返回true。</p><p>对比另一个addElement函数，区别是没有返回值</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addElement</span><span class="params">(E obj)</span> </span>{</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = obj;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><p>和ArrayList类似的。</p><p>不过如果不指定capacityIncrement的话，扩容后是原来的<strong>2倍</strong>，而不像ArrayList的1.5倍。</p><p>2倍空间不够的话，就直接给所需要的最短长度。</p><p>最大值长度也是2<sup>31</sup>-1，即Integer.MAX_VALUE。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The maximum size of array to allocate.</span></span><br><span class="line"><span class="comment"> * Some VMs reserve some header words in an array.</span></span><br><span class="line"><span class="comment"> * Attempts to allocate larger arrays may result in</span></span><br><span class="line"><span class="comment"> * OutOfMemoryError: Requested array size exceeds VM limit</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>{</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                     capacityIncrement : oldCapacity);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;前面只说了vector是线程安全的。下面是对其部分源码的解读。&lt;/p&gt;
&lt;h2 id=&quot;构造函数&quot;&gt;&lt;a href=&quot;#构造函数&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="Java" scheme="https://klaus08.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://klaus08.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JZ20 包含min函数的栈</title>
    <link href="https://klaus08.top/post/f743ffaa.html"/>
    <id>https://klaus08.top/post/f743ffaa.html</id>
    <published>2021-07-11T02:30:06.000Z</published>
    <updated>2021-07-11T02:30:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/4c776177d2c04c2494f2555c9fcc1e49?tpId=13&amp;&amp;tqId=11173&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">原题链接</a></p><h2 id="JZ20-包含min函数的栈"><a href="#JZ20-包含min函数的栈" class="headerlink" title="JZ20 包含min函数的栈"></a>JZ20 包含min函数的栈</h2><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数，并且调用 min函数、push函数 及 pop函数 的时间复杂度都是 O(1)。</p><p>push(value):将value压入栈中；</p><p>pop():弹出栈顶元素；</p><p>top():获取栈顶元素；</p><p>min():获取栈中最小元素。<a id="more"></a></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：["PSH-1","PSH2","MIN","TOP","POP","PSH1","TOP","MIN"]</span><br><span class="line">返回值：-1,2,1,-1</span><br></pre></td></tr></tbody></table></figure><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>要求时间复杂度都是O（1），所以一定要保存最小值。</p><p>一开始的想法是用中间保存，每次push时更新，但忘了pop也会改变min的值，并且pop之后需要<strong>历史最小值</strong>。于是换了思路想用char[]保存最小值，但是发现当一个数同时在栈中出现9次以上（两位数）时，就没办法保存了。</p><p>最后看了题解有了如下两种解法：</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>这种方法使用变量存储最小值，保证了每次<strong>在新的最小值之前啊，存储了上一次最小值</strong>。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0x7fffffff</span>;<span class="comment">//存储最小值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>{</span><br><span class="line">        <span class="comment">//一开始栈中没有元素</span></span><br><span class="line">        <span class="keyword">if</span>(stack.empty()) {</span><br><span class="line">            stack.push(node);</span><br><span class="line">            tmp=node;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="comment">//待入栈元素比当前最小值还小/相等</span></span><br><span class="line">            <span class="keyword">if</span>(node&lt;=tmp){</span><br><span class="line">                stack.push(tmp);<span class="comment">//保存历史最小值</span></span><br><span class="line">                tmp = node;<span class="comment">//更新最小值</span></span><br><span class="line">            }</span><br><span class="line">            stack.push(node);<span class="comment">//新元素入栈</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(stack.empty()){}</span><br><span class="line">        <span class="comment">//2. 栈顶元素等于最小值</span></span><br><span class="line">        <span class="keyword">if</span>(tmp == stack.peek()){</span><br><span class="line">            <span class="keyword">if</span>(stack.size()&gt;<span class="number">1</span>){</span><br><span class="line">                stack.pop();</span><br><span class="line">                tmp = stack.peek();<span class="comment">//上一个最小值</span></span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                tmp =<span class="number">0x7fffffff</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        stack.pop();</span><br><span class="line">        <span class="comment">//1. 栈顶元素不等于最小值</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这个使用了两个栈。刚开始栈都空的时候，正常push第一个元素；</p><p>以后每次minStack值push自己栈顶元素与待入栈元素中<strong>最小</strong>的一个，依次来存储历史最小值。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双栈，用另一个栈保存min</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; dataStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; minStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>{</span><br><span class="line">        dataStack.push(node);</span><br><span class="line">        minStack.push(minStack.isEmpty() ? node : Math.min(minStack.peek(), node));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>{</span><br><span class="line">        dataStack.pop();</span><br><span class="line">        minStack.pop();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> dataStack.peek();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> minStack.peek();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/4c776177d2c04c2494f2555c9fcc1e49?tpId=13&amp;amp;&amp;amp;tqId=11173&amp;amp;rp=1&amp;amp;ru=/ta/coding-interviews&amp;amp;qru=/ta/coding-interviews/question-ranking&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;JZ20-包含min函数的栈&quot;&gt;&lt;a href=&quot;#JZ20-包含min函数的栈&quot; class=&quot;headerlink&quot; title=&quot;JZ20 包含min函数的栈&quot;&gt;&lt;/a&gt;JZ20 包含min函数的栈&lt;/h2&gt;&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数，并且调用 min函数、push函数 及 pop函数 的时间复杂度都是 O(1)。&lt;/p&gt;
&lt;p&gt;push(value):将value压入栈中；&lt;/p&gt;
&lt;p&gt;pop():弹出栈顶元素；&lt;/p&gt;
&lt;p&gt;top():获取栈顶元素；&lt;/p&gt;
&lt;p&gt;min():获取栈中最小元素。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
</feed>
