<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>klaus&#39; blog</title>
  
  <subtitle>Recording learning and life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://klaus08.top/"/>
  <updated>2021-07-12T12:43:14.000Z</updated>
  <id>https://klaus08.top/</id>
  
  <author>
    <name>klaus08</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JZ63 数据流中的中位数</title>
    <link href="https://klaus08.top/post/6b3afdd4.html"/>
    <id>https://klaus08.top/post/6b3afdd4.html</id>
    <published>2021-07-12T12:43:14.000Z</published>
    <updated>2021-07-12T12:43:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/9be0172896bd43948f8a32fb954e1be1?tpId=13&amp;&amp;tqId=11216&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">原题链接</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。我们使用Insert()方法读取数据流，使用GetMedian()方法获取当前读取数据的中位数。<a id="more"></a></p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[5,2,3,4,1,6,7,0,8]</span><br><span class="line">返回值："5.00 3.50 3.00 3.50 3.00 3.50 4.00 3.50 4.00 "</span><br><span class="line">说明：数据流里面不断吐出的是5,2,3...,则得到的平均数分别为5,(5+2)/2,3...</span><br></pre></td></tr></tbody></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题看示例反而看得更迷糊了。简单的叙述一下就是：这里会动态的插入若干数值，然后会边插边求中位数。</p><p>目前我能想到两种方法。一是用数组存储插入的数值，然后进行排序挑选中位数；二是<strong>插入排序</strong>，最后GetMedian()部分只需要根据奇偶个数返回中位数就可以了。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    Vector&lt;Integer&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(Integer num)</span> </span>{</span><br><span class="line">        vector.add(num);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">GetMedian</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = vector.size();</span><br><span class="line">        Collections.sort(vector);</span><br><span class="line">        <span class="keyword">if</span>(len%<span class="number">2</span> == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">double</span> res = ((<span class="keyword">double</span>)vector.get(len / <span class="number">2</span>) + (<span class="keyword">double</span>)vector.get(len / <span class="number">2</span> - <span class="number">1</span>))/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">double</span> res =(<span class="keyword">double</span>) vector.get(len / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里提醒自己，太久没碰java以至于原来写出来<code>double res = (vector.get(len / 2) + vector.get(len / 2 - 1))/2;</code>这样的代码，最后返回的总是一个整数。就是那个折磨，，法二明天写吧。</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/9be0172896bd43948f8a32fb954e1be1?tpId=13&amp;amp;&amp;amp;tqId=11216&amp;amp;rp=1&amp;amp;ru=/ta/coding-interviews&amp;amp;qru=/ta/coding-interviews/question-ranking&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。我们使用Insert()方法读取数据流，使用GetMedian()方法获取当前读取数据的中位数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>==和equals()方法的区别</title>
    <link href="https://klaus08.top/post/7e168472.html"/>
    <id>https://klaus08.top/post/7e168472.html</id>
    <published>2021-07-12T09:39:39.000Z</published>
    <updated>2021-07-12T09:39:39.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    String a = <span class="string">"a"</span>;</span><br><span class="line">    String b = <span class="keyword">new</span> String(<span class="string">"a"</span>);</span><br><span class="line">    String c = <span class="keyword">new</span> String(<span class="string">"a"</span>);</span><br><span class="line">    String d =c;</span><br><span class="line"></span><br><span class="line">    System.out.println(a==b);<span class="comment">//false</span></span><br><span class="line">    System.out.println(a.equals(b));<span class="comment">//true</span></span><br><span class="line">    System.out.println(b==c);<span class="comment">//false</span></span><br><span class="line">    System.out.println(b.equals(c));<span class="comment">//true</span></span><br><span class="line">    System.out.println(c==d);<span class="comment">//true</span></span><br><span class="line">    System.out.println(c.equals(d));<span class="comment">//true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>个人理解，==就是直接判断两个变量指示的值是否相等，对普通变量而言足够了，但是java中还有一种变量叫做<strong>引用变量</strong>，对一个String类型的引用变量b来说，a直接指向了“a”，而b指向的是new出来的String对象所在的<strong>地址</strong>，直接使用==比较就相当于拿”a”和一串内存地址作比较，所以a==b是false。而equals()方法则会根据地址，找到地址指向的内容，然后进行比较。</p><p>然后直接的<code>String d =c;</code>是个浅拷贝。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span
      
    
    </summary>
    
    
      <category term="Java" scheme="https://klaus08.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://klaus08.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java集合（四）</title>
    <link href="https://klaus08.top/post/b1f0c757.html"/>
    <id>https://klaus08.top/post/b1f0c757.html</id>
    <published>2021-07-12T08:17:00.000Z</published>
    <updated>2021-07-12T08:17:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><hr><p>每一个Map元素包括两个值，一个是key另一个是value，二者存在映射关系，也就是可以通过key索引得到唯一对应的value。所以Map中<strong>key不允许重复</strong>，key的相等与否通过<code>equals()</code>方法确定，key和value都是任何引用类型的数据。</p><p>Map中的key在一起就组成了一个Set集合（无序、不重复），并且Map提供了keySet()方法，用于返回所有key组成的Set集合。</p><p>Map和Set有很多相似的地方，如果把Map中存储的Key-Value对称一个变量，并且value是key的附庸，key在哪里valuse就在哪里的话，Map和Set就没有什么区别了。而如果把所有的value放在一起来看，Map又像是一个List（可重复，key看作索引）。</p><br><h2 id="提供的方法"><a href="#提供的方法" class="headerlink" title="提供的方法"></a>提供的方法</h2><table><thead><tr><th align="center">方法</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">void  clear()</td><td align="center">清空Map</td></tr><tr><td align="center">booelan containsKey(Object key)</td><td align="center"></td></tr><tr><td align="center">booelan containsValue(Object key)</td><td align="center"></td></tr><tr><td align="center">Set entrySet()</td><td align="center">返回key-value对组成的Set集合；</td></tr><tr><td align="center">Object get(Object key)</td><td align="center">获取key对应的value，不存在则返回null</td></tr><tr><td align="center">boolean isEmpty()</td><td align="center"></td></tr><tr><td align="center">Set keySet()</td><td align="center">返回所有key组成的Set集合</td></tr><tr><td align="center">Object put(Object key, Object value)</td><td align="center">添加一对值，如果已有key相同的，覆盖</td></tr><tr><td align="center">void putAll(Map m)</td><td align="center">将m中的全部kv对复制到本map中</td></tr><tr><td align="center">Object remove(Objecct key)</td><td align="center">删除kv对，返回value，key不存在返回null</td></tr><tr><td align="center">int size()</td><td align="center"></td></tr><tr><td align="center">Collection values()</td><td align="center">返回该map中所有value组成的Collection</td></tr></tbody></table><p>Map中包含一个内部类：Entry，封装了key-value对。有以下三个方法：</p><p>getKey(), getValue() 以及setValue()。</p><br><h2 id="HashMap和Hashtable"><a href="#HashMap和Hashtable" class="headerlink" title="HashMap和Hashtable"></a>HashMap和Hashtable</h2><p>二者都是Map的实现类，区别主要是：</p><ol><li>Hashtable是一个**线程安全的Map实现，而HashMap是线程不安全的；所以HashMap性能会高一点。</li><li>Hashtable不允许使用null作为key或value，但HashMap允许。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.klaus.maps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Map&lt;Integer,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        System.out.println(map.put(<span class="number">1</span>, <span class="string">"a"</span>)); <span class="comment">// null</span></span><br><span class="line">        System.out.println(map.put(<span class="number">2</span>, <span class="string">"b"</span>));<span class="comment">// null</span></span><br><span class="line">        System.out.println(map.put(<span class="number">1</span>, <span class="string">"x"</span>));<span class="comment">// a</span></span><br><span class="line"></span><br><span class="line">        System.out.println(map);<span class="comment">// {1=x, 2=b}</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注释的内容是输出结果，正常添加是返回的都是null，而在添加失败时<font style="color:red">返回key已对应value</font>。</p><h3 id="HashMap的迭代方法"><a href="#HashMap的迭代方法" class="headerlink" title="HashMap的迭代方法"></a>HashMap的迭代方法</h3><p>Map接口并没有获取Iterator的方法，并且Iterator只适用于Collection，所以说只能获取key的Set集合然后再调用iterator()方法获得迭代器。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取迭代器</span></span><br><span class="line">Iterator&lt;String&gt; iterator = map.keySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()){</span><br><span class="line">    System.out.println(map.get(iterator.next()));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="判等原则"><a href="#判等原则" class="headerlink" title="判等原则"></a>判等原则</h3><p>HashMap和Hashtable都是<font style="color:red">只根据equals()的返回结果来去确定</font></p><p>自定义类做key的时候，如果重写equals()和hashCode()方法，就应该保证equals()的结果和hashCode()的结果是一致的，即：equals()返回true时，hashCode()的值应该相等。</p><p>对比hashSet，判等不仅要求equals()返回true，还要hashCode()相等。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Map&quot;&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;每一个Map元素包括两个值，一个是key另一个是value，二者存在映射关系，也就是可以通过key索引得到唯一对应的val
      
    
    </summary>
    
    
      <category term="Java" scheme="https://klaus08.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://klaus08.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JZ29 最小的K个数</title>
    <link href="https://klaus08.top/post/35b4acc4.html"/>
    <id>https://klaus08.top/post/35b4acc4.html</id>
    <published>2021-07-12T02:01:59.000Z</published>
    <updated>2021-07-12T02:01:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/6a296eb82cf844ca8539b57c23e6e9bf?tpId=13&amp;&amp;tqId=11182&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">原题链接</a></p><br><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><hr><p>给定一个数组，找出其中最小的K个数。例如数组元素是4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4。</p><p>0 &lt;= k &lt;= input.length &lt;= 10000；</p><p>0 &lt;= input[i] &lt;= 10000。</p><a id="more"></a><br><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[4,5,1,6,2,7,3,8],4 </span><br><span class="line">返回值：[1,2,3,4]</span><br><span class="line">说明：返回最小的4个数即可，返回[1,3,2,4]也可以</span><br></pre></td></tr></tbody></table></figure><br><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[1], 0</span><br><span class="line">返回值：[]</span><br></pre></td></tr></tbody></table></figure><br><h2 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[0,1,2,1,2],3</span><br><span class="line">返回值：[0,1,1]</span><br></pre></td></tr></tbody></table></figure><br><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一、最简单的办法，把input[]元素全部插入PriorityQueue中进行自动排序，然后k次poll()出队首元素，这样时间复杂度是。</p><p>二、用<strong>堆</strong>的方法</p><p>三、分治。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="一、简单"><a href="#一、简单" class="headerlink" title="一、简单"></a>一、简单</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">GetLeastNumbers_Solution</span><span class="params">(<span class="keyword">int</span> [] input, <span class="keyword">int</span> k)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(input.length==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">0</span>);</span><br><span class="line">        PriorityQueue&lt;Integer&gt; priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(input.length);</span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;input.length;i++){</span><br><span class="line">            priorityQueue.add(input[i]);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++){</span><br><span class="line">            arrayList.add(priorityQueue.poll());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>[] arr = {<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">8</span>};</span><br><span class="line"></span><br><span class="line">        System.out.println(GetLeastNumbers_Solution(arr, <span class="number">4</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><h3 id="二、堆"><a href="#二、堆" class="headerlink" title="二、堆"></a>二、堆</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">还没写。</span><br></pre></td></tr></tbody></table></figure><br><h3 id="三、分治"><a href="#三、分治" class="headerlink" title="三、分治"></a>三、分治</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">没写。</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/6a296eb82cf844ca8539b57c23e6e9bf?tpId=13&amp;amp;&amp;amp;tqId=11182&amp;amp;rp=1&amp;amp;ru=/ta/coding-interviews&amp;amp;qru=/ta/coding-interviews/question-ranking&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题链接&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;给定一个数组，找出其中最小的K个数。例如数组元素是4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4。&lt;/p&gt;
&lt;p&gt;0 &amp;lt;= k &amp;lt;= input.length &amp;lt;= 10000；&lt;/p&gt;
&lt;p&gt;0 &amp;lt;= input[i] &amp;lt;= 10000。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Java集合（三）</title>
    <link href="https://klaus08.top/post/6ddde32.html"/>
    <id>https://klaus08.top/post/6ddde32.html</id>
    <published>2021-07-11T09:01:30.000Z</published>
    <updated>2021-07-11T09:01:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Queue集合"><a href="#Queue集合" class="headerlink" title="Queue集合"></a>Queue集合</h1><hr><p>Queue接口及其子系：</p><p><img src="https://gitee.com/man-ljw/PicBed/raw/master/QQ%E6%88%AA%E5%9B%BE20210711172706.jpg" alt=""></p><a id="more"></a><p><strong>常用方法：</strong></p><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>void add(Object o)</code></td><td align="center">将指定元素添加到队尾，通过调用offer(Object o)，<font style="color: red">非空</font></td></tr><tr><td align="center"><code>Object element()</code></td><td align="center">获取队列头部元素，但不删除</td></tr><tr><td align="center"><code>boolean offer(Object)</code></td><td align="center">将指定元素添加到队尾。<br>容量有限时，此方法更好。</td></tr><tr><td align="center"><code>Object peek()</code></td><td align="center">获取头部元素，但不删除</td></tr><tr><td align="center"><code>Object poll()</code></td><td align="center">获取头部元素，<font style="color: red">并删除</font></td></tr><tr><td align="center"><code>Object remove()</code></td><td align="center">获取头部元素，<font style="color: red">并删除</font></td></tr></tbody></table><br><h2 id="PriorityQueue实现类"><a href="#PriorityQueue实现类" class="headerlink" title="PriorityQueue实现类"></a>PriorityQueue实现类</h2><hr><p>并不是绝对标准的队列实现：插入元素会进行<font style="color: red">排序</font>，队列中保存的顺序按照<strong>队列中元素的大小</strong>，所以<code>poll()</code>或者<code>peek()</code>得到的是最小元素。也就是说PriorityQueue并不遵循<strong>FIFO</strong>。</p><p><strong>不允许插入null元素。</strong></p><p>排序也有两种方法：自然排序和定制排序。（想到了TreeSet）</p><h3 id="自然排序"><a href="#自然排序" class="headerlink" title="自然排序"></a>自然排序</h3><p>插入到PriorityQueue的元素都必须实现了<strong>comparable</strong>接口。</p><h3 id="定制排序"><a href="#定制排序" class="headerlink" title="定制排序"></a>定制排序</h3><p>创建PriorityQueue时传入<strong>comparator</strong>对象。</p><br><h2 id="Deque接口"><a href="#Deque接口" class="headerlink" title="Deque接口"></a>Deque接口</h2><hr><p>Deque是Queue接口的子接口，代表一个<strong>双端队列</strong>。</p><p>默认长度是16，每次扩容<font style="color: red">2倍</font>。</p><h3 id="ArrayDeque实现类"><a href="#ArrayDeque实现类" class="headerlink" title="ArrayDeque实现类"></a>ArrayDeque实现类</h3><p>是一个基于数组实现的双端队列。</p><p><strong>特有方法：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span></span>;<span class="comment">//删除并返回头部元素，通过removeFirst函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span></span>;<span class="comment">//删除头部元素并返回</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span></span>;<span class="comment">//删除尾部元素并返回</span></span><br></pre></td></tr></tbody></table></figure><p><strong>ArrayDeque</strong>的功能和Stack类似，但性能比Stack更优秀。</p><br><h2 id="LinkedList实现类"><a href="#LinkedList实现类" class="headerlink" title="LinkedList实现类"></a>LinkedList实现类</h2><hr><p>LinkedList是List接口的实现类，所i有可以通过索引访问。此外还实现了Deque接口，因此可以当作双端口队列来使用—&gt;”栈“。</p><p>对比前面的ArrayList，基于双向链表实现，他俩的区别就是数组和链表的区别：</p><p>ArrayList可以随机访问 ，但是插入删除的代价很高。</p><p>LinkedList可以轻松的完成插入删除的工作，但不支持随机访问。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Queue集合&quot;&gt;&lt;a href=&quot;#Queue集合&quot; class=&quot;headerlink&quot; title=&quot;Queue集合&quot;&gt;&lt;/a&gt;Queue集合&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;Queue接口及其子系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/man-ljw/PicBed/raw/master/QQ%E6%88%AA%E5%9B%BE20210711172706.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://klaus08.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://klaus08.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JZ21 栈的压入、弹出序列</title>
    <link href="https://klaus08.top/post/8e4b09f7.html"/>
    <id>https://klaus08.top/post/8e4b09f7.html</id>
    <published>2021-07-11T07:41:31.000Z</published>
    <updated>2021-07-11T07:41:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/d77d11405cc7470d82554cb392585106?tpId=13&amp;tqId=11174&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=cyc_github" target="_blank" rel="noopener">原题链接</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><hr><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）<a id="more"></a></p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><hr><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,2,3,4,5],[4,3,5,1,2]</span><br><span class="line"></span><br><span class="line">返回值：false</span><br></pre></td></tr></tbody></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><hr><p>用一个栈模拟这个过程。</p><p>① 将pushA的第一个未入栈的元素入栈，然后判断栈顶元素是不是popA的第一个元素。</p><p>② 如果不是，则继续将pushA的下一个元素压入栈中，回到①；</p><p>③ 如果是，栈中元素出栈，回到①。</p><p>直到pushA所有元素都入栈。</p><p>最后判断栈中是否还有元素，没有的话说明出栈序列合法。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><hr><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">IsPopOrder</span><span class="params">(<span class="keyword">int</span> [] pushA,<span class="keyword">int</span> [] popA)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(pushA.length != popA.length||</span><br><span class="line">          pushA.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j : pushA){</span><br><span class="line">            stack.push(pushA[j]);</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; stack.peek() == popA[i]){</span><br><span class="line">                stack.pop();</span><br><span class="line">                i++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/d77d11405cc7470d82554cb392585106?tpId=13&amp;amp;tqId=11174&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=/ta/coding-interviews&amp;amp;qru=/ta/coding-interviews/question-ranking&amp;amp;from=cyc_github&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Vector补充</title>
    <link href="https://klaus08.top/post/d5599252.html"/>
    <id>https://klaus08.top/post/d5599252.html</id>
    <published>2021-07-11T04:51:57.000Z</published>
    <updated>2021-07-11T04:51:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>前面只说了vector是线程安全的。下面是对其部分源码的解读。</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><hr><p><img src="https://gitee.com/man-ljw/PicBed/raw/master/image-20210711125545819.png" alt=""></p><ol><li><p>Vector(int initialCapacity, int capacityIncrement)</p><p>initialCapacity是Vector初始长度，capacityIncrement是在当前长度不够进行扩容时的扩容长度。</p></li><li><p>Vector(int)<br>只声明了初始长度，capacityIncrement是0。</p></li><li><p>Vector()<br>默认长度是10。</p></li><li><p>Vector(Collection )</p><p>将Collection转为Vector。</p></li></ol><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><hr><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>{</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用<code>synchronized</code>进行同步，返回true。</p><p>对比另一个addElement函数，区别是没有返回值</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addElement</span><span class="params">(E obj)</span> </span>{</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = obj;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><p>和ArrayList类似的。</p><p>不过如果不指定capacityIncrement的话，扩容后是原来的<strong>2倍</strong>，而不像ArrayList的1.5倍。</p><p>2倍空间不够的话，就直接给所需要的最短长度。</p><p>最大值长度也是2<sup>31</sup>-1，即Integer.MAX_VALUE。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The maximum size of array to allocate.</span></span><br><span class="line"><span class="comment"> * Some VMs reserve some header words in an array.</span></span><br><span class="line"><span class="comment"> * Attempts to allocate larger arrays may result in</span></span><br><span class="line"><span class="comment"> * OutOfMemoryError: Requested array size exceeds VM limit</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>{</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                     capacityIncrement : oldCapacity);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;前面只说了vector是线程安全的。下面是对其部分源码的解读。&lt;/p&gt;
&lt;h2 id=&quot;构造函数&quot;&gt;&lt;a href=&quot;#构造函数&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="Java" scheme="https://klaus08.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://klaus08.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JZ20 包含min函数的栈</title>
    <link href="https://klaus08.top/post/f743ffaa.html"/>
    <id>https://klaus08.top/post/f743ffaa.html</id>
    <published>2021-07-11T02:30:06.000Z</published>
    <updated>2021-07-11T02:30:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/4c776177d2c04c2494f2555c9fcc1e49?tpId=13&amp;&amp;tqId=11173&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">原题链接</a></p><h2 id="JZ20-包含min函数的栈"><a href="#JZ20-包含min函数的栈" class="headerlink" title="JZ20 包含min函数的栈"></a>JZ20 包含min函数的栈</h2><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数，并且调用 min函数、push函数 及 pop函数 的时间复杂度都是 O(1)。</p><p>push(value):将value压入栈中；</p><p>pop():弹出栈顶元素；</p><p>top():获取栈顶元素；</p><p>min():获取栈中最小元素。<a id="more"></a></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：["PSH-1","PSH2","MIN","TOP","POP","PSH1","TOP","MIN"]</span><br><span class="line">返回值：-1,2,1,-1</span><br></pre></td></tr></tbody></table></figure><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>要求时间复杂度都是O（1），所以一定要保存最小值。</p><p>一开始的想法是用中间保存，每次push时更新，但忘了pop也会改变min的值，并且pop之后需要<strong>历史最小值</strong>。于是换了思路想用char[]保存最小值，但是发现当一个数同时在栈中出现9次以上（两位数）时，就没办法保存了。</p><p>最后看了题解有了如下两种解法：</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>这种方法使用变量存储最小值，保证了每次<strong>在新的最小值之前啊，存储了上一次最小值</strong>。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0x7fffffff</span>;<span class="comment">//存储最小值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>{</span><br><span class="line">        <span class="comment">//一开始栈中没有元素</span></span><br><span class="line">        <span class="keyword">if</span>(stack.empty()) {</span><br><span class="line">            stack.push(node);</span><br><span class="line">            tmp=node;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="comment">//待入栈元素比当前最小值还小/相等</span></span><br><span class="line">            <span class="keyword">if</span>(node&lt;=tmp){</span><br><span class="line">                stack.push(tmp);<span class="comment">//保存历史最小值</span></span><br><span class="line">                tmp = node;<span class="comment">//更新最小值</span></span><br><span class="line">            }</span><br><span class="line">            stack.push(node);<span class="comment">//新元素入栈</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(stack.empty()){}</span><br><span class="line">        <span class="comment">//2. 栈顶元素等于最小值</span></span><br><span class="line">        <span class="keyword">if</span>(tmp == stack.peek()){</span><br><span class="line">            <span class="keyword">if</span>(stack.size()&gt;<span class="number">1</span>){</span><br><span class="line">                stack.pop();</span><br><span class="line">                tmp = stack.peek();<span class="comment">//上一个最小值</span></span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                tmp =<span class="number">0x7fffffff</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        stack.pop();</span><br><span class="line">        <span class="comment">//1. 栈顶元素不等于最小值</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这个使用了两个栈。刚开始栈都空的时候，正常push第一个元素；</p><p>以后每次minStack值push自己栈顶元素与待入栈元素中<strong>最小</strong>的一个，依次来存储历史最小值。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双栈，用另一个栈保存min</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; dataStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; minStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>{</span><br><span class="line">        dataStack.push(node);</span><br><span class="line">        minStack.push(minStack.isEmpty() ? node : Math.min(minStack.peek(), node));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>{</span><br><span class="line">        dataStack.pop();</span><br><span class="line">        minStack.pop();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> dataStack.peek();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> minStack.peek();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/4c776177d2c04c2494f2555c9fcc1e49?tpId=13&amp;amp;&amp;amp;tqId=11173&amp;amp;rp=1&amp;amp;ru=/ta/coding-interviews&amp;amp;qru=/ta/coding-interviews/question-ranking&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;JZ20-包含min函数的栈&quot;&gt;&lt;a href=&quot;#JZ20-包含min函数的栈&quot; class=&quot;headerlink&quot; title=&quot;JZ20 包含min函数的栈&quot;&gt;&lt;/a&gt;JZ20 包含min函数的栈&lt;/h2&gt;&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数，并且调用 min函数、push函数 及 pop函数 的时间复杂度都是 O(1)。&lt;/p&gt;
&lt;p&gt;push(value):将value压入栈中；&lt;/p&gt;
&lt;p&gt;pop():弹出栈顶元素；&lt;/p&gt;
&lt;p&gt;top():获取栈顶元素；&lt;/p&gt;
&lt;p&gt;min():获取栈中最小元素。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>JZ5 用两个栈实现队列</title>
    <link href="https://klaus08.top/post/3e80c40.html"/>
    <id>https://klaus08.top/post/3e80c40.html</id>
    <published>2021-07-11T00:27:44.000Z</published>
    <updated>2021-07-11T00:27:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6?tpId=13&amp;&amp;tqId=11158&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">原题链接</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>用两个栈来实现一个队列，分别完成在队列尾部插入整数(push)和在队列头部删除整数(pop)的功能。 队列中的元素为int类型。保证操作合法，即保证pop操作时队列内已有元素。</p><a id="more"></a><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：["PSH1","PSH2","POP","POP"]</span><br><span class="line"></span><br><span class="line">返回值：1,2</span><br></pre></td></tr></tbody></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>把stack1用于push，stack2用于pop达到队列FIFO的效果。没有限制两个栈的大小，所以第一次pop时直接把stack1的pop顺序push进stack2，然后stack2进行pop即可。</p><p>但是第二次pop时，就不能再像刚才那样了，因为stack2如果还有元素的话，说明这些元素都比stack1栈底的元素入站早。所以再有pop时要把stack2的元素顺序pop完，才能输出stack1的元素。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>{</span><br><span class="line">        stack1.push(node);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(stack2.empty()){</span><br><span class="line">            <span class="keyword">while</span>(!stack1.empty()){</span><br><span class="line">                stack2.push(stack1.pop());</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> stack2.pop();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> stack2.pop();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6?tpId=13&amp;amp;&amp;amp;tqId=11158&amp;amp;rp=1&amp;amp;ru=/ta/coding-interviews&amp;amp;qru=/ta/coding-interviews/question-ranking&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;用两个栈来实现一个队列，分别完成在队列尾部插入整数(push)和在队列头部删除整数(pop)的功能。 队列中的元素为int类型。保证操作合法，即保证pop操作时队列内已有元素。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>JZ34 第一个只出现一次的字符位置</title>
    <link href="https://klaus08.top/post/5cb7c635.html"/>
    <id>https://klaus08.top/post/5cb7c635.html</id>
    <published>2021-07-10T10:14:30.000Z</published>
    <updated>2021-07-10T10:14:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/1c82e8cf713b4bbeb2a5b31cf5b0417c?tpId=13&amp;&amp;tqId=11187&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">原题链接</a></p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>在一个字符串(0&lt;=字符串长度&lt;=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）.（从0开始计数）<a id="more"></a></p><h1 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入："google"</span><br><span class="line">返回值：4</span><br></pre></td></tr></tbody></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>还没有学到map，所以用数组模拟，str中的字符做key，数组中的值做value，一边遍历后统计字符，然后再根据str中字符的顺序依次遍历，value为1的就是要的结果。当时这里没想明白，总是想用数组下标进行遍历，但这样就没办法满足题设中<code>第一个</code>的要求，卡了很久。</p><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">FirstNotRepeatingChar</span><span class="params">(String str)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span>[] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)</span><br><span class="line">        ++map[str.charAt(i)];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;str.length(); ++i) {</span><br><span class="line">        <span class="keyword">if</span> (map[str.charAt(i)] == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/1c82e8cf713b4bbeb2a5b31cf5b0417c?tpId=13&amp;amp;&amp;amp;tqId=11187&amp;amp;rp=1&amp;amp;ru=/ta/coding-interviews&amp;amp;qru=/ta/coding-interviews/question-ranking&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题链接&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;在一个字符串(0&amp;lt;=字符串长度&amp;lt;=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）.（从0开始计数）&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList补充</title>
    <link href="https://klaus08.top/post/b4b62cca.html"/>
    <id>https://klaus08.top/post/b4b62cca.html</id>
    <published>2021-07-10T04:55:51.000Z</published>
    <updated>2021-07-10T04:55:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><p>ArrayList共有三种构造方法：</p><h2 id="1-无参构造"><a href="#1-无参构造" class="headerlink" title="1. 无参构造"></a>1. 无参构造</h2><p>​        创建一个长度10的Object数组。</p><h2 id="2-参数是int型-0-2-31-1）"><a href="#2-参数是int型-0-2-31-1）" class="headerlink" title="2.参数是int型 [0~2^31-1）"></a>2.参数是int型 [0~2^31-1）</h2><p>​        若参数大于0，创建指定长度的Object[]；</p><p>​        若参数等于0，Object类型的<strong>空数组</strong>；</p><p>​        其他情况，抛出异常。</p><h2 id="3-参数是Collectinon"><a href="#3-参数是Collectinon" class="headerlink" title="3.参数是Collectinon"></a>3.参数是Collectinon</h2><p>​        创建一个包含集合c所有元素的List，元素集合和集合Iterator遍历得到的元素顺序一样。<a id="more"></a></p><h1 id="void-trimToSize"><a href="#void-trimToSize" class="headerlink" title="void trimToSize()"></a>void trimToSize()</h1><p>若List中元素个数小于List长度，进行判断：</p><p>元素个数为0，trim后返回空Object数组；</p><p>否则的话通过<code>Arrays.copyOf(Object [], int size)</code>进行trim。</p><h1 id="扩容函数"><a href="#扩容函数" class="headerlink" title="扩容函数"></a>扩容函数</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下是ArrayList的部分源码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>{</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>{</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {</span><br><span class="line">       <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>{</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>{</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="void-grow-int-minCapacity"><a href="#void-grow-int-minCapacity" class="headerlink" title="void grow(int minCapacity)"></a>void grow(int minCapacity)</h2><p>ArrayList扩容的核心函数。每次扩容后至少是原容量的1.5倍，若1.5倍容量仍不够，那么newCapacity直接设为minCapacity。最后如果newCapacity &gt; MaxArrraySize 的话，使用hugeCapacity(int )比较minCapacity和MAX_ARRAY_SIZE的大小，如果前者大，那么新容量就是Integer.Max_Value，否则就是MAX_ARRAY_SIZE。</p><p>也就是说：ArrayList并非是无限大的，它最大可以扩容到2^31-1。</p><p><strong>注：</strong>MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8，这里减8的原因是需要8bit存储元信息。</p><h2 id="boolean-add-E-e"><a href="#boolean-add-E-e" class="headerlink" title="boolean add(E e)"></a>boolean add(E e)</h2><p>添加时先调用<code>ensureCapacityInternal(int minCapacity)</code>方法把数组容量增加1；</p><p>然后将待添加的元素加入。</p><h2 id="ensureCapacityInternal-int-minCapacity"><a href="#ensureCapacityInternal-int-minCapacity" class="headerlink" title="ensureCapacityInternal(int minCapacity)"></a>ensureCapacityInternal(int minCapacity)</h2><p>该函数调用利用ensureExplicitCapacity()函数得到最小扩容量。</p><h2 id="calculateCapacity"><a href="#calculateCapacity" class="headerlink" title="calculateCapacity()"></a>calculateCapacity()</h2><figure class="highlight plain"><figcaption><span>elementData, int minCapacity)```计算最小空间：</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">若elementData为空，那么返回max(10, minCapacity)；否则返回minCapacity。</span><br><span class="line"></span><br><span class="line"># remove函数</span><br><span class="line"></span><br><span class="line">删除的**时间复杂度为 O(N)**。</span><br><span class="line"></span><br><span class="line">```JAVA</span><br><span class="line">public E remove(int index) {</span><br><span class="line">        rangeCheck(index);//检查index是否合法</span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">        E oldValue = elementData(index);//获取被删除的元素</span><br><span class="line"></span><br><span class="line">        int numMoved = size - index - 1;//删除一个元素后，后面要向前移动的元素的个数</span><br><span class="line">        if (numMoved &gt; 0)</span><br><span class="line">            System.arraycopy(elementData, index+1, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = null; // clear to let GC do its work</span><br><span class="line">    //都向前移一位，所以最后以为置为null并将size-1</span><br><span class="line">        return oldValue;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="fastRemove-int-index"><a href="#fastRemove-int-index" class="headerlink" title="fastRemove (int index)"></a>fastRemove (int index)</h2><p>用于remove(Obj o)，较于remove(int index)只少了对index合法性的检测，以及不返回被删除的元素。</p><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p>ArrayList 基于数组实现，并且具有动态扩容特性，因此保存元素的数组不一定都会被使用，那么就没必要全部进行序列化。</p><p>保存元素的数组 elementData 使用 transient 修饰，该关键字声明数组默认不会被序列化。</p><p>序列化时需要使用 ObjectOutputStream 的 writeObject() 将对象转换为字节流并输出。而 writeObject() 方法在传入的对象存在 writeObject() 的时候会去反射调用该对象的 writeObject() 来实现序列化。反序列化使用的是 ObjectInputStream 的 readObject() 方法，原理类似。</p><h1 id="Fail-Fast"><a href="#Fail-Fast" class="headerlink" title="Fail-Fast"></a>Fail-Fast</h1><p>modCount 用来记录 ArrayList 结构发生变化的次数。结构发生变化是指<strong>添加</strong>或者<strong>删除</strong>至少一个元素的所有操作，或者是<strong>调整</strong>内部数组的<strong>大小</strong>，仅仅只是设置元素的值不算结构发生变化。</p><p>在进行序列化或者迭代等操作时，需要比较操作前后 modCount 是否改变，如果改变了需要抛出 ConcurrentModificationException。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;构造方法&quot;&gt;&lt;a href=&quot;#构造方法&quot; class=&quot;headerlink&quot; title=&quot;构造方法&quot;&gt;&lt;/a&gt;构造方法&lt;/h1&gt;&lt;p&gt;ArrayList共有三种构造方法：&lt;/p&gt;
&lt;h2 id=&quot;1-无参构造&quot;&gt;&lt;a href=&quot;#1-无参构造&quot; class=&quot;headerlink&quot; title=&quot;1. 无参构造&quot;&gt;&lt;/a&gt;1. 无参构造&lt;/h2&gt;&lt;p&gt;​        创建一个长度10的Object数组。&lt;/p&gt;
&lt;h2 id=&quot;2-参数是int型-0-2-31-1）&quot;&gt;&lt;a href=&quot;#2-参数是int型-0-2-31-1）&quot; class=&quot;headerlink&quot; title=&quot;2.参数是int型 [0~2^31-1）&quot;&gt;&lt;/a&gt;2.参数是int型 [0~2^31-1）&lt;/h2&gt;&lt;p&gt;​        若参数大于0，创建指定长度的Object[]；&lt;/p&gt;
&lt;p&gt;​        若参数等于0，Object类型的&lt;strong&gt;空数组&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;​        其他情况，抛出异常。&lt;/p&gt;
&lt;h2 id=&quot;3-参数是Collectinon&quot;&gt;&lt;a href=&quot;#3-参数是Collectinon&quot; class=&quot;headerlink&quot; title=&quot;3.参数是Collectinon&quot;&gt;&lt;/a&gt;3.参数是Collectinon&lt;/h2&gt;&lt;p&gt;​        创建一个包含集合c所有元素的List，元素集合和集合Iterator遍历得到的元素顺序一样。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://klaus08.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://klaus08.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java集合（二）</title>
    <link href="https://klaus08.top/post/4bc37d60.html"/>
    <id>https://klaus08.top/post/4bc37d60.html</id>
    <published>2021-07-10T02:41:50.000Z</published>
    <updated>2021-07-10T02:41:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h1><p>List集合是一个<strong>有序、可重复</strong>的集合。每个元素按添加顺序设置索引，第一个添加的索引为0，依次递增。List通过顺序索引来访问元素。</p><p>List作为Collection的子接口，除了可以使用Collection的所有方法还多了根据索引操作元素的方法：<a id="more"></a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, Object element)</span></span>;</span><br><span class="line"><span class="comment">//添加元素到指定下标处</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection c)</span></span>;</span><br><span class="line"><span class="comment">//把集合c中的全部元素以index为起始索引添加进List</span></span><br><span class="line"><span class="function">Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="comment">//获得index处的元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span></span>;</span><br><span class="line"><span class="comment">//获得o在List中第一出现的索引，不存在的话返回-1</span></span><br><span class="line"><span class="function">Object <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="comment">//删除并返回index位置的元素</span></span><br><span class="line"><span class="function">Object <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, Object o)</span></span>;</span><br><span class="line"><span class="comment">//将index位置的元素替换成o，并返回o</span></span><br><span class="line"><span class="function">List <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromList, <span class="keyword">int</span> toList)</span></span>;</span><br><span class="line"><span class="comment">//返回下标在[fromList, toList)的元素组成的子List集合</span></span><br></pre></td></tr></tbody></table></figure><p>List判断相等的标准是：<strong>equals()返回true</strong>。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>List除了iterator()（获得的迭代器只能向后迭代）外，还提供了listIterator()方法，返回一个ListIterator对象，ListIterator接口继承了Iterator接口，并增加了以下方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//是否还有上一个元素</span></span><br><span class="line"><span class="function">Object <span class="title">Previous</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//返回上一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//插入一个元素</span></span><br></pre></td></tr></tbody></table></figure><p>下面是ListIterator的示例。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.klaus.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"Hello"</span>);</span><br><span class="line">        list.add(<span class="string">"owo"</span>);</span><br><span class="line">        list.add(<span class="number">1</span>,<span class="string">"world"</span>);</span><br><span class="line"></span><br><span class="line">        ListIterator&lt;String&gt; listIterator = list.listIterator();</span><br><span class="line">        <span class="keyword">while</span> (listIterator.hasNext()){</span><br><span class="line">            System.out.println(listIterator.next());</span><br><span class="line">            listIterator.add(<span class="string">"---"</span>);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"反向迭代"</span>);</span><br><span class="line">        <span class="keyword">while</span> (listIterator.hasPrevious()){</span><br><span class="line">            System.out.println(listIterator.previous());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line">world</span><br><span class="line">owo</span><br><span class="line">反向迭代</span><br><span class="line">---</span><br><span class="line">owo</span><br><span class="line">---</span><br><span class="line">world</span><br><span class="line">---</span><br><span class="line">Hello</span><br></pre></td></tr></tbody></table></figure><h2 id="ArrayList和Vector"><a href="#ArrayList和Vector" class="headerlink" title="ArrayList和Vector"></a>ArrayList和Vector</h2><hr><p>ArrayList和Vector作为List的实现类，完全支持List接口的所有方法。其内部封装了一个动态的、允许再分配的Object[]，ArrayList和Vector对象通过initialCapacity参数指定数组长度，当超过时会自动增加。</p><p>在创建时如果不指定他们的大小，那么默认为<strong>10</strong>。</p><p>此外，</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span></span>; <span class="comment">//将ArrayList和Vector的长度增加minCapacity</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span></span>;<span class="comment">//调整大小，使长度刚好等于当前元素个数</span></span><br></pre></td></tr></tbody></table></figure><p><strong>注：</strong>ArrayList是<strong>线程不安全的</strong>，当有超过一个线程修改集合时，需要<strong>手动</strong>保证集合的同步性。</p><pre><code>Vector是**线程安全的**，所以性能比ArrayList低。</code></pre><h2 id="解决Vector线程不安全"><a href="#解决Vector线程不安全" class="headerlink" title="解决Vector线程不安全"></a>解决Vector线程不安全</h2><hr><h3 id="Collections-synchronizedList"><a href="#Collections-synchronizedList" class="headerlink" title="Collections.synchronizedList()"></a>Collections.synchronizedList()</h3><p>​        使用<code>Collections.synchronizedList();</code>可以得到一个线程安全的 ArrayList。</p><h3 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h3><p>使用concurrent包下的CopyOnWriteArrayList 类。</p><p><strong>原因：读写分离</strong></p><p>写操作在一个复制的数组上进行，读操作还是在原始数组中进行，读写分离，互不影响。</p><p>写操作需要加锁，防止并发写入时导致写入数据丢失。</p><p>写操作结束之后需要把原始数组指向新的复制数组。</p><p><strong>适用场景</strong></p><p>CopyOnWriteArrayList 在写操作的<strong>同时允许读操作</strong>，大大提高了读操作的性能，因此很适合<strong>读多写少</strong>的应用场景。</p><p>但是 CopyOnWriteArrayList 有其缺陷：</p><ul><li>内存占用：在写操作时需要复制一个新的数组，使得内存占用为原来的两倍左右；</li><li>数据不一致：读操作不能读取实时性的数据，因为部分写操作的数据还未同步到读数组中。</li></ul><p>所以 CopyOnWriteArrayList 不适合内存敏感以及对实时性要求很高的场景。</p><h2 id="Stack类"><a href="#Stack类" class="headerlink" title="Stack类"></a>Stack类</h2><hr><p>Vector还提供了Stack子类，模拟栈的特点FILO。因为Stack继承了Vector，所以也是<strong>线程安全的</strong>。</p><p>其进栈出栈的都是Object，所以取出后要进行类型转换。</p><p>主要方法有：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">peek</span><span class="params">()</span></span>; <span class="comment">//返回栈顶元素但并不弹出</span></span><br><span class="line"><span class="function">Object <span class="title">pop</span><span class="params">()</span></span>;<span class="comment">//弹出栈顶元素</span></span><br><span class="line"><span class="function">Object <span class="title">push</span><span class="params">(Object o)</span></span>;<span class="comment">//将o入栈</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;List集合&quot;&gt;&lt;a href=&quot;#List集合&quot; class=&quot;headerlink&quot; title=&quot;List集合&quot;&gt;&lt;/a&gt;List集合&lt;/h1&gt;&lt;p&gt;List集合是一个&lt;strong&gt;有序、可重复&lt;/strong&gt;的集合。每个元素按添加顺序设置索引，第一个添加的索引为0，依次递增。List通过顺序索引来访问元素。&lt;/p&gt;
&lt;p&gt;List作为Collection的子接口，除了可以使用Collection的所有方法还多了根据索引操作元素的方法：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://klaus08.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://klaus08.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JZ19 顺时针打印矩阵</title>
    <link href="https://klaus08.top/post/2c0ee3a9.html"/>
    <id>https://klaus08.top/post/2c0ee3a9.html</id>
    <published>2021-07-10T00:38:07.000Z</published>
    <updated>2021-07-10T00:38:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[1,2,3,4],</span><br><span class="line">[5,6,7,8],</span><br><span class="line">[9,10,11,12],</span><br><span class="line">[13,14,15,16]]</span><br></pre></td></tr></tbody></table></figure><p>则依次打印出数字</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10]</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h1 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入：[[1,2],[3,4]]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">返回值：[1,2,4,3]</span><br></pre></td></tr></tbody></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>如下图，要这样循环打印数组元素，可以看成 打印不同外圈的元素。因为横竖左右都有限定并且循环方向也一直在变，所以需要四个变量r1, rows, c1, cols界定循环边缘。</p><p>每一个外圈打印规则是：先➡打印上面那一行，⬇ 打印右边一列，⬅打印下面一行，⬆ 打印左边一列。每次打印完一行或者一列后，其界定变量要跟着变化（+1或者-1，为了不重复打印拐角元素）。对于下面一行和左边一列，要判断行列的界定元素不相等，否则就会重复。</p><img src="https://gitee.com/man-ljw/PicBed/raw/master/QQ截图20210710084453.jpg" align="left"><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printMatrix</span><span class="params">(<span class="keyword">int</span> [][] matrix)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> rows = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> cols = matrix[<span class="number">0</span>].length;</span><br><span class="line">        ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> r1 = <span class="number">0</span>,c1 =<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (r1&lt;=rows-<span class="number">1</span> &amp;&amp; c1 &lt;= cols-<span class="number">1</span>){</span><br><span class="line">            <span class="comment">// ➡打印上面一行</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=c1;j&lt;cols;j++){</span><br><span class="line">                arr.add(matrix[r1][j]);</span><br><span class="line">            }</span><br><span class="line">            r1++;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ⬇ 打印右边一列</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = r1;i&lt;rows;i++){</span><br><span class="line">                arr.add(matrix[i][cols-<span class="number">1</span>]);</span><br><span class="line">            }</span><br><span class="line">            rows--;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//⬅打印下面一行</span></span><br><span class="line">            <span class="keyword">if</span>(r1!=rows+<span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = cols - <span class="number">2</span>; j &gt;= c1; j--) {</span><br><span class="line">                    arr.add(matrix[rows][j]);</span><br><span class="line">                }</span><br><span class="line">                cols--;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//⬆ 打印左边一列</span></span><br><span class="line">            <span class="keyword">if</span>(c1!=cols) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = rows - <span class="number">1</span>; i &gt;= r1; i--) {</span><br><span class="line">                    arr.add(matrix[i][c1]);</span><br><span class="line">                }</span><br><span class="line">                c1++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[[1,2,3,4],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[5,6,7,8],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[9,10,11,12],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[13,14,15,16]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;则依次打印出数字&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>JZ2 替换空格</title>
    <link href="https://klaus08.top/post/906568b5.html"/>
    <id>https://klaus08.top/post/906568b5.html</id>
    <published>2021-07-09T01:35:57.000Z</published>
    <updated>2021-07-09T01:35:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。<a id="more"></a></p><h1 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入："We Are Happy"</span><br><span class="line">返回值："We%20Are%20Happy"</span><br></pre></td></tr></tbody></table></figure><h1 id="解答及思路"><a href="#解答及思路" class="headerlink" title="解答及思路"></a>解答及思路</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.Java提供的replace</span></span><br><span class="line"><span class="comment">//  使用的是regex，但是为什么快。。。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">replaceSpace</span> <span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        String res = s.replace(<span class="string">" "</span>, <span class="string">"%20"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">​</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line">//2. 创建中间char数组变量，遍历数组，把空格替换，不是空格的不变。</span><br><span class="line">//   巨慢！！！</span><br><span class="line">    public static String replaceSpace(String s){</span><br><span class="line">        int len =s.length();</span><br><span class="line">        char[] tmp = new char[len *3];</span><br><span class="line">        int index=0;</span><br><span class="line"></span><br><span class="line">        for (int i= 0;i&lt;len;i++){</span><br><span class="line">            if (s.charAt(i) ==' '){</span><br><span class="line">                tmp[index++] = '%';</span><br><span class="line">                tmp[index++] = '2';</span><br><span class="line">                tmp[index++] = '0';</span><br><span class="line">            }</span><br><span class="line">            else {</span><br><span class="line">                tmp[index++] = s.charAt(i);</span><br><span class="line">             }</span><br><span class="line">        }</span><br><span class="line">        return new String(tmp, 0, index);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Java集合（一）</title>
    <link href="https://klaus08.top/post/7bd591b8.html"/>
    <id>https://klaus08.top/post/7bd591b8.html</id>
    <published>2021-07-08T14:16:06.000Z</published>
    <updated>2021-07-08T14:16:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>Collecction系：</p><p><img src="https://gitee.com/man-ljw/PicBed/raw/master/Collection-Map.png" alt=""></p><a id="more"></a>Map系：<p><img src="https://gitee.com/man-ljw/PicBed/raw/master/Map.png" alt=""></p><h1 id="1-Collection接口"><a href="#1-Collection接口" class="headerlink" title="1.Collection接口"></a>1.Collection接口</h1><p>数组元素既可以是基本类型的值也可以是对象（对象的引用变量）；而集合里只能保存对象（对象的引用变量）。</p><h2 id="Collection方法"><a href="#Collection方法" class="headerlink" title="Collection方法"></a>Collection方法</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(E e)</span></span>;</span><br><span class="line"><span class="comment">//移除元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleat</span><span class="params">(E e)</span></span>;</span><br><span class="line"><span class="comment">//清空集合中元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span>;</span><br><span class="line"><span class="comment">//判断集合中是否包含指定元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection c)</span></span>;</span><br><span class="line"><span class="comment">//判断集合中是否包含集合c中的全部元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//判断集合是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//集合中元素的个数</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">retainALL</span><span class="params">(Collection c)</span></span>;</span><br><span class="line"><span class="comment">//只保留和集合c中有的元素</span></span><br></pre></td></tr></tbody></table></figure><h2 id="1-1Iterator"><a href="#1-1Iterator" class="headerlink" title="1.1Iterator"></a>1.1Iterator</h2><p>Iterator接口方法，可以通过Collection.iterator()方法得到实现类。</p><p>在遍历的过程中如果删除元素，会出现错误。原因是Iterator采用“快速失败机制”，一旦在迭代过程中检测到集合已经被修改，立即引发<strong>ConcurrentModificationException异常</strong>。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//如果还有元素没有被遍历，返回true</span></span><br><span class="line"><span class="function">Object <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//返回下一个元素，如果有的话</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//删除上一次next()返回的元素</span></span><br></pre></td></tr></tbody></table></figure><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.klaus.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Collect_1</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Collection &lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        c.add(<span class="string">"Hello"</span>);</span><br><span class="line">        c.add(<span class="string">"World"</span>);</span><br><span class="line">        c.add(<span class="string">"!"</span>);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;String&gt; i = c.iterator();</span><br><span class="line">        <span class="keyword">while</span> (i.hasNext()){</span><br><span class="line">            System.out.print(i.next()+<span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"c.contains(\"Hello\"): "</span>+c.contains(<span class="string">"Hello"</span>));</span><br><span class="line">        System.out.println(<span class="string">"c.contains(\"Hell\"): "</span>+c.contains(<span class="string">"Hell"</span>));</span><br><span class="line">        c.remove(<span class="string">"Hello"</span>);</span><br><span class="line">        System.out.println(<span class="string">"c.contains(\"Hello\"): "</span>+c.contains(<span class="string">"Hello"</span>));       </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello World ! </span><br><span class="line">c.contains("Hello"): true</span><br><span class="line">c.contains("Hell"): false</span><br><span class="line">c.contains("Hello"): false</span><br></pre></td></tr></tbody></table></figure><p><strong>foreach</strong>访问更简洁</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String s:c){</span><br><span class="line">     System.out.print(s+<span class="string">" "</span>);</span><br><span class="line"> }</span><br><span class="line"> System.out.println(<span class="string">""</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="1-2-Set集合"><a href="#1-2-Set集合" class="headerlink" title="1.2 Set集合"></a>1.2 Set集合</h2><p><strong>无序、不重复。</strong></p><p>Set和Collection相比没有提供任何额外的方法。使用也类似。</p><h3 id="1-2-1-HashSet类"><a href="#1-2-1-HashSet类" class="headerlink" title="1.2.1 HashSet类"></a>1.2.1 HashSet类</h3><ul><li><p>HashSet使用Hash算法来存储集合中的元素。</p></li><li><p>HashSet中元素顺序与添加顺序可能不一样。</p></li><li><p>hashCode()返回值是在HashSet中的索引。</p></li></ul><p>添加元素时，HashSet会调用<strong>待添加对象</strong>的<code>hashCode()</code>方法得到对应的哈希值，然后由<strong>哈希值</strong>决定该对象在HashSet中的存储位置。</p><p><font style="color:red" size="5">A.equals(B)返回true，则A.hashCode() == B.hashCode()。<br></font></p><p>特殊情况：</p><ol><li><p>equals()比较返回true，但hashCode()不一样。</p><p>此时HashSet会把两个对象根据不同的哈希值存储到对应位置，但与Set<strong>不重复</strong>的原则矛盾。</p></li><li><p>hashCode()相同，但equals()比较返回false。</p><p>在同样的位置（由哈希值决定）通过链式结构把两个对象存储，但这样会导致性能下降。</p></li></ol><h3 id="1-2-2LinkedHasgSet类"><a href="#1-2-2LinkedHasgSet类" class="headerlink" title="1.2.2LinkedHasgSet类"></a>1.2.2LinkedHasgSet类</h3><p>元素的位置依然由hashCode值决定。与HashSet不同的是，LinkedHashSet使用<strong>链表</strong>维护元素的次序，这样就可以使元素遍历时看起来是以插入的顺序保存的。</p><p>因此性能略低于HashSet，<strong>但在迭代全部元素时由很好的性能</strong>。</p><h3 id="1-2-3TreeSet"><a href="#1-2-3TreeSet" class="headerlink" title="1.2.3TreeSet"></a>1.2.3TreeSet</h3><p>TreeSet是SortedSet接口的实现类，保证集合元素处于排序状态。</p><p>重要方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SortedSet <span class="title">subSet</span><span class="params">(fromElement, toElement)</span></span>;</span><br><span class="line"><span class="comment">//返回此Set的子集，范围是[fromElement, toElement)</span></span><br></pre></td></tr></tbody></table></figure><p>排序方法由自然排序、定制排序两种。</p><p><strong>自然排序</strong>就是调用集合元素的<font style="color: red">compareTO(Object o)</font>方法比较元素，然后按照<strong>升序</strong>排列。</p><p>在把对象作为元素加入HashSet中时，对象的类必须实现Comparable接口；加入一个对象后，以后只能加入该类型的对象，否则会有<code>ClassCastException</code>。</p><p>在添加新元素时，<strong>唯一的判别标准是compareTo()是否返回零</strong>。</p><p>对象被添加后，改变对象内用于比较的属性的值的话，它在TreeSet中的位置不会改变。</p><table><thead><tr><th align="center">类型</th><th align="center">比较方法</th></tr></thead><tbody><tr><td align="center">Character</td><td align="center">UNICODE</td></tr><tr><td align="center">数值类型（Integer，BigInteger等）</td><td align="center">按数值大小</td></tr><tr><td align="center">Boolean</td><td align="center">true&gt;false</td></tr><tr><td align="center">String</td><td align="center">串中字符的UNICODE</td></tr><tr><td align="center">Date、Time</td><td align="center">后面的日期&gt;前面的日期</td></tr></tbody></table><p><strong>定制排序</strong>需要通过Comparator接口的帮助，定义其<code>compare(Object o1, Object o2)</code>函数，根据返回结果排序。</p><p>在添加新元素时，<strong>唯一的判别标准是compare(Object o1, Object o2)是否返回零</strong>；返回0则不会把第二个元素添加。</p><h3 id="1-2-4EnumSet类"><a href="#1-2-4EnumSet类" class="headerlink" title="1.2.4EnumSet类"></a>1.2.4EnumSet类</h3><p>专门为枚举元素设计的类。</p><p>EnumSet集合元素也是<strong>有序</strong>的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Collecction系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/man-ljw/PicBed/raw/master/Collection-Map.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://klaus08.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://klaus08.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JZ1 二维数组中的查找</title>
    <link href="https://klaus08.top/post/d35944e1.html"/>
    <id>https://klaus08.top/post/d35944e1.html</id>
    <published>2021-07-08T11:42:42.000Z</published>
    <updated>2021-07-08T11:42:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><a id="more"></a><h1 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入： 7,[[1,2,8,9],[2,4,9,12],[4,7,10,13],[6,8,11,15]]</span><br><span class="line">返回值：true</span><br><span class="line">说明： 存在7，返回true</span><br></pre></td></tr></tbody></table></figure><h1 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：3,[[1,2,8,9],[2,4,9,12],[4,7,10,13],[6,8,11,15]]</span><br><span class="line">返回值：false</span><br><span class="line">说明：不存在3，返回false</span><br></pre></td></tr></tbody></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>如下图所示，这个数组元素规律性很强。左边的数小于右边的，下边的数小于上边的。</p><p>所以从右上角的数S开始比对检测，若target小于S，那么左移；若target大于S，下移一行。</p><p>这里的行、列变换还可以用二分查找的思想。。想起来的话再写吧。</p><p><img src="https://gitee.com/man-ljw/PicBed/raw/master/QQ%E6%88%AA%E5%9B%BE20210708195425.jpg" alt=""></p><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> [][] array)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(array.length==<span class="number">0</span> || array[<span class="number">0</span>].length==<span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> a = array.length;</span><br><span class="line">        <span class="keyword">int</span> b = array[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j=b-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(target != array[i][j]){</span><br><span class="line">            <span class="keyword">if</span>(i&lt;=a-<span class="number">1</span> &amp;&amp; j&gt;=<span class="number">0</span>){</span><br><span class="line">                <span class="keyword">if</span>(target &gt; array[i][j])</span><br><span class="line">                    i++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; array[i][j])</span><br><span class="line">                    j--;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(i&gt;a-<span class="number">1</span> || j&lt;<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>JZ50 数组中重复的数字</title>
    <link href="https://klaus08.top/post/39ccbee0.html"/>
    <id>https://klaus08.top/post/39ccbee0.html</id>
    <published>2021-07-08T06:12:25.000Z</published>
    <updated>2021-07-08T06:12:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/practice/6fe361ede7e54db1b84adc81d09d8524?tpId=13&amp;&amp;tqId=11203&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">数组中重复的数字  -  牛客网</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任一一个重复的数字。 例如，如果输入长度为7的数组[2,3,1,0,2,5,3]，那么对应的输出是2或者3。存在不合法的输入的话输出-1.</p><a id="more"></a><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[2,3,1,0,2,5,3]</span><br><span class="line">返回值：2</span><br><span class="line">说明：2或3都是对的</span><br></pre></td></tr></tbody></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>题的特殊点：<strong>长度为n的数组里的所有数字都在0到n-1的范围内</strong></p><p><strong>把元素 i 放在arr【i】上，若对应位置已有该元素，则重复复。</strong></p><p><strong>刚开始想法是以下标为主，找到对应的元素交换，但是这样时间还是O(n^2)。所以 是以数组元素为主，把元素放到对应的下标的数组中，这样就不用找元素了，并且每次都能把一个元素放到对应位置，直到发现重复</strong>。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.klaus.prob1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; numbers.length;i++){</span><br><span class="line">            <span class="keyword">while</span>(numbers[i] != i){ <span class="comment">//while的原因是可能交换一次后，numbers[i] 依然不等于 i</span></span><br><span class="line">                <span class="keyword">if</span>(numbers[i] == numbers[numbers[i]])   <span class="comment">//把数组元素和元素作为下标对应的元素进行比较</span></span><br><span class="line">                    <span class="keyword">return</span> numbers[i];</span><br><span class="line">                <span class="keyword">int</span> tmp = numbers[numbers[i]];</span><br><span class="line">                numbers[numbers[i]] = numbers[i];</span><br><span class="line">                numbers[i] = tmp;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/6fe361ede7e54db1b84adc81d09d8524?tpId=13&amp;amp;&amp;amp;tqId=11203&amp;amp;rp=1&amp;amp;ru=/ta/coding-interviews&amp;amp;qru=/ta/coding-interviews/question-ranking&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;数组中重复的数字  -  牛客网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任一一个重复的数字。 例如，如果输入长度为7的数组[2,3,1,0,2,5,3]，那么对应的输出是2或者3。存在不合法的输入的话输出-1.&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://klaus08.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://klaus08.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="剑指OFFER" scheme="https://klaus08.top/tags/%E5%89%91%E6%8C%87OFFER/"/>
    
      <category term="数组" scheme="https://klaus08.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>mySQL（六）</title>
    <link href="https://klaus08.top/post/80a58d0e.html"/>
    <id>https://klaus08.top/post/80a58d0e.html</id>
    <published>2021-07-08T02:26:47.000Z</published>
    <updated>2021-07-08T02:26:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="管理事务处理"><a href="#管理事务处理" class="headerlink" title="管理事务处理"></a>管理事务处理</h1><p>事物的四个特性：</p><p><strong>Atomic:</strong> 一个事务要么全部提交成功，要么全部失败回滚，不能只执行其中的一部分操作。</p><p>*<em>Consistency: *</em>一个事务在执行之前和执行之后，数据库都必须处于一致性状态。 </p><p>*<em>Isolation: *</em> 在并发环境中，并发的事务时相互隔离的，一个事务的执行不能不被其他事务干扰。</p><p>*<em>During: *</em>一旦事务提交，那么它对数据库中的对应数据的状态的变更就会永久保存到数据库中。</p><a id="more"></a><p>并非所有引擎都支持事务处理：MyISAM和InnoDB是两种最常用的引擎，而前者不支持明确的事务处理管理，后者支持。</p><p><strong>事务（transaction）</strong>指一组SQL语句；</p><p><strong>回退（rollback）</strong>指撤销指定SQL语句的过程；</p><p><strong>提交（commit）</strong>指将未存储的SQL语句结果写入数据库表；</p><p><strong>保留点（savepoint）</strong>指事务处理中设置的临时占位符（placeholder），你可以对它发布回退（与回退整个事务处理不同）。</p><h2 id="事务开始"><a href="#事务开始" class="headerlink" title="事务开始"></a>事务开始</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span></span><br></pre></td></tr></tbody></table></figure><h2 id="使用ROLLBACK"><a href="#使用ROLLBACK" class="headerlink" title="使用ROLLBACK"></a>使用ROLLBACK</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> orderitems; <span class="comment">--先查询数据，都在</span></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;<span class="comment">-- 开始事务</span></span><br><span class="line"><span class="keyword">DELETE</span>  <span class="keyword">FROM</span> orderitems;<span class="comment">--删除表中数据</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> orderitems;<span class="comment">--查询是否删除</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;<span class="comment">--回滚</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> orderitems;<span class="comment">--删除的数据又重新出现</span></span><br></pre></td></tr></tbody></table></figure><h2 id="使用COMMIT"><a href="#使用COMMIT" class="headerlink" title="使用COMMIT"></a>使用COMMIT</h2><p>一般的MySQL语句都是直接针对数据库表执行和编写的，会自动提交，也叫做隐含提交。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> AUTOCOMMIT = <span class="number">0</span>; <span class="comment">-- 禁止自动提交</span></span><br></pre></td></tr></tbody></table></figure><p>但是在事务处理中，提交不会隐含地进行，必须使用<strong>COMMIT</strong>语句进行明确的提交。</p><p>COMMIT可以保证：在SQL语句不出错时才真正执行操作，否则错误语句会被自动撤销。</p><p>当COMMIT或ROLLBACK执行后，事务会自动关闭。</p><h2 id="使用保存点"><a href="#使用保存点" class="headerlink" title="使用保存点"></a>使用保存点</h2><p>只使用ROLLBACK和COMMIT的话明显不够人性化，一旦出错就会回滚到最开始的状态。</p><p>为了支持回退部分事务处理，必须能在事务处理块中合适的位置放置占位符，这些占位符被叫做保存点。</p><h3 id="创建保存点"><a href="#创建保存点" class="headerlink" title="创建保存点"></a>创建保存点</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SAVEPOINT</span> 保存点名;</span><br></pre></td></tr></tbody></table></figure><p>shi’y使用保存点</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> 保存点名;</span><br></pre></td></tr></tbody></table></figure><h1 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h1><p><strong>字符集</strong>是字母和符号的集合；</p><p><strong>编码</strong>是某个字符集成员的内部表示；</p><p><strong>校对</strong>规定字符如何比较的指令。</p><p>通过<code>SHOW CHARACTER SET;</code>查看数据库可用的数据集。</p><h1 id="安全管理"><a href="#安全管理" class="headerlink" title="安全管理"></a>安全管理</h1><p>MySQL中用户信息都存储在mysql数据库中的user表中。可使用以下指令查看：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> mysql;</span><br><span class="line">CELECCT USER FROM USER;</span><br></pre></td></tr></tbody></table></figure><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> 用户名</span><br><span class="line"><span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'口令'</span></span><br></pre></td></tr></tbody></table></figure><h2 id="用户重命名"><a href="#用户重命名" class="headerlink" title="用户重命名"></a>用户重命名</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RENAME</span> <span class="keyword">USER</span> 原名 <span class="keyword">TO</span> 新名</span><br></pre></td></tr></tbody></table></figure><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> UESR 用户名;</span><br></pre></td></tr></tbody></table></figure><h2 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h2><p>在设置权限时，要求账号用户必须存在，但涉及的对象却没有这个要求。</p><p>这样可以：给未来的表设置权限、某表被删除后再出现时对它的权限依然存在。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 授予权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">INSERT</span> / <span class="keyword">DELETE</span> / <span class="keyword">UPDATE</span> / <span class="keyword">SELECT</span> <span class="keyword">ON</span> 数据库.表名 <span class="keyword">TO</span> 用户名;</span><br><span class="line"><span class="comment">-- 授予多个权限可以简化</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">INSERT</span>, <span class="keyword">ALTER</span>,<span class="keyword">UPDATE</span> <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">TO</span>  用户名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 取消权限</span></span><br><span class="line"><span class="comment">-- 被废除的权限必须存在</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">INSERT</span> / <span class="keyword">DELETE</span> / <span class="keyword">UPDATE</span> / <span class="keyword">SELECT</span> <span class="keyword">ON</span> 数据库.表名 <span class="keyword">FROM</span> 用户名;</span><br></pre></td></tr></tbody></table></figure><p>可授予、废除的权限如下：</p><p><img src="https://gitee.com/man-ljw/PicBed/raw/master/QQ%E6%88%AA%E5%9B%BE20210708094316.jpg" alt=""></p><p><img src="https://gitee.com/man-ljw/PicBed/raw/master/QQ%E6%88%AA%E5%9B%BE20210708094437.jpg" alt=""></p><h2 id="更改密码"><a href="#更改密码" class="headerlink" title="更改密码"></a>更改密码</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> FRO 用户名 = <span class="keyword">PASSWORD</span>(<span class="string">'新密码'</span>);</span><br></pre></td></tr></tbody></table></figure><h1 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h1><p>由于数据库数据经常是打开的，所以不能使用一般的文件转存方法，不过有以下几种解决方法：</p><ol><li>使用命令行实用程序mysqldump转储数据库所有内容。</li><li>可用命令行实用程序mysqlhotcopy从一个数据库复制所有数据（MyISAM，Innodb支持）。</li><li>使用MySQL的BACKUP TABLE或SELECT INTO OUTFILE转储所有数据到某个外部文件。</li></ol><p><strong>注：</strong>为了保证所有数据被写到磁盘（包括索引数据），可能需要在进行备份前使用<strong>FLUSH TABLES</strong>语句。</p><h1 id="MySQL日志"><a href="#MySQL日志" class="headerlink" title="MySQL日志"></a>MySQL日志</h1><ul><li>错误日志，位于Data目录下，通常命名时[主机名].err。</li><li>查询日志，位于Data目录下，通常命名时[主机名].log。</li><li>二进制日志。位于data目录下，通常命名为hostname-bin，它记录更新过数据（或者可能更新过数据）的所有语句。</li></ul><h1 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h1><p>使用<code>用SHOW PROCESSLIST</code>查看活动进程，并可以使用KILL+PID杀死进程（需要root）。</p><ul><li>一般来说，存储过程执行得比一条一条地执行其中的各条MySQL语句快。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;管理事务处理&quot;&gt;&lt;a href=&quot;#管理事务处理&quot; class=&quot;headerlink&quot; title=&quot;管理事务处理&quot;&gt;&lt;/a&gt;管理事务处理&lt;/h1&gt;&lt;p&gt;事物的四个特性：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Atomic:&lt;/strong&gt; 一个事务要么全部提交成功，要么全部失败回滚，不能只执行其中的一部分操作。&lt;/p&gt;
&lt;p&gt;*&lt;em&gt;Consistency: *&lt;/em&gt;一个事务在执行之前和执行之后，数据库都必须处于一致性状态。 &lt;/p&gt;
&lt;p&gt;*&lt;em&gt;Isolation: *&lt;/em&gt; 在并发环境中，并发的事务时相互隔离的，一个事务的执行不能不被其他事务干扰。&lt;/p&gt;
&lt;p&gt;*&lt;em&gt;During: *&lt;/em&gt;一旦事务提交，那么它对数据库中的对应数据的状态的变更就会永久保存到数据库中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://klaus08.top/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://klaus08.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL（五）</title>
    <link href="https://klaus08.top/post/28cfbe0f.html"/>
    <id>https://klaus08.top/post/28cfbe0f.html</id>
    <published>2021-07-08T02:20:22.000Z</published>
    <updated>2021-07-08T02:20:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h1><p>游标（cursor）是一个存储在MySQL服务器上的数据库查询，它不是一条SELECT语句，而是被该语句检索出来的结果集。</p><p>有时，需要在检索出来的行中前进或后退一行或多行。这就是使用游标的原因。</p><p>MySQL中游标只能用于存储过程。</p><a id="more"></a><h2 id="声明游标"><a href="#声明游标" class="headerlink" title="声明游标"></a>声明游标</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> 游标名 <span class="keyword">CURSOR</span></span><br><span class="line"><span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">SELECT</span> 列名</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="打开游标和关闭游标"><a href="#打开游标和关闭游标" class="headerlink" title="打开游标和关闭游标"></a>打开游标和关闭游标</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OPEN 游标名;</span><br><span class="line"></span><br><span class="line">CLOSE 游标名;</span><br><span class="line"><span class="comment">-- 如果你不明确关闭游标，MySQL将会在到达END语句时自动关闭它。</span></span><br></pre></td></tr></tbody></table></figure><h2 id="使用游标数据"><a href="#使用游标数据" class="headerlink" title="使用游标数据"></a>使用游标数据</h2><p>使用游标数据的前提是，已经打开了游标，然后使用FETCH语句逐行访问。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> processorders(oBEGIN</span><br><span class="line"><span class="comment">-- Declare local variablesDECLARE o INT;</span></span><br><span class="line"><span class="comment">-- Declare the cursor</span></span><br><span class="line"><span class="keyword">DECLARE</span> ordernumbers CURSORFOR</span><br><span class="line"><span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orders;</span><br><span class="line"><span class="comment">-- open the cursor</span></span><br><span class="line">OPEN ordernumbers;</span><br><span class="line"><span class="comment">-- Get order number</span></span><br><span class="line">FETCH ordernumbers INTO o ;</span><br><span class="line"><span class="comment">-- Close the cursor</span></span><br><span class="line">CLOSE ordernumbers;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></tbody></table></figure><p><font size="7">待补</font></p><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><p>在某个表发生更改时<strong>自动处理</strong>，这确切地说就是触发器。</p><p>触发器值响应<strong>DELETE，UPDATE，INSERT</strong>这三种操作，可以选择在这三种操作之前或之后响应，也就是说每个表至多有六个触发器。</p><p>触发器名必须在每个<strong>表</strong>中唯一，而不是整个数据库。</p><p>只有<strong>表</strong>才支持触发器，视图不行。</p><h2 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> 触发器名 <span class="keyword">BEFORE</span>/<span class="keyword">AFTER</span></span><br><span class="line"><span class="keyword">INSERT</span>/<span class="keyword">UPDATE</span>/<span class="keyword">DELETE</span> <span class="keyword">ON</span> 表名</span><br><span class="line">[<span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span>] 响应动作</span><br></pre></td></tr></tbody></table></figure><h2 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> 触发器名;</span><br></pre></td></tr></tbody></table></figure><p><strong>INSERT触发器</strong>：</p><p>​    在INSERT触发器内，可以引用一个名为<strong>NEW</strong>的的虚拟表访问被插入的行；</p><p>​    在BEFOREINSERT触发器中，NEW中的值可以被改变；</p><p><strong>DELETE触发器</strong>：</p><p>​     在DELETE触发器内，可以引用一个名为<strong>OLD</strong>的虚拟表访问被删除的行；</p><p>​    OLD中的值不可更改。</p><p><strong>UPDATE触发器：</strong></p><p>​    在UPDATE触发器内，可以用<strong>OLD</strong>表访问更改前的值，使用<strong>NEW</strong>表访问更改后的值；</p><p>​    NEW中的值可以被改变；OLD中的值不可更改。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;游标&quot;&gt;&lt;a href=&quot;#游标&quot; class=&quot;headerlink&quot; title=&quot;游标&quot;&gt;&lt;/a&gt;游标&lt;/h1&gt;&lt;p&gt;游标（cursor）是一个存储在MySQL服务器上的数据库查询，它不是一条SELECT语句，而是被该语句检索出来的结果集。&lt;/p&gt;
&lt;p&gt;有时，需要在检索出来的行中前进或后退一行或多行。这就是使用游标的原因。&lt;/p&gt;
&lt;p&gt;MySQL中游标只能用于存储过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://klaus08.top/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://klaus08.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL（四）</title>
    <link href="https://klaus08.top/post/47517b48.html"/>
    <id>https://klaus08.top/post/47517b48.html</id>
    <published>2021-07-08T02:20:13.000Z</published>
    <updated>2021-07-08T02:20:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>视图是<strong>虚拟</strong>的表。与包含数据的表不一样，视图只包含使用时动态检索数据的查询。不包含表中应该有的任何列或数据，它包含的是一个SQL查询。</p><p>可以对视图执行SELECT操作，过滤和排序数据，将视图联结到其他视图或表，甚至能添加和更新数据</p><a id="more"></a><p>对视图增加或删除行，实际上是对其基表增加或删除行。</p><p>并非所有视图都是可更新的。</p><p>视图<strong>不能索引</strong>。</p><h2 id="创建视图实例"><a href="#创建视图实例" class="headerlink" title="创建视图实例"></a>创建视图实例</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> product_customers <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, prod_id</span><br><span class="line"><span class="keyword">FROM</span> customers, orders, orderitems</span><br><span class="line"><span class="keyword">WHERE</span> customers.cust_id = orders.cust_id</span><br><span class="line"><span class="keyword">AND</span> orderitems.order_num = orders. order_num ;</span><br></pre></td></tr></tbody></table></figure><p>作用：<strong>重新格式化</strong>，<strong>过滤表中不想要的数据</strong></p><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><h2 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> 存储过程名(参数<span class="number">1</span>,</span><br><span class="line">          参数<span class="number">2</span></span><br><span class="line">          ·</span><br><span class="line">          ·</span><br><span class="line">          ·);</span><br></pre></td></tr></tbody></table></figure><h2 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名([<span class="keyword">OUT</span> 参数<span class="number">1</span> 类型,</span><br><span class="line">                       <span class="keyword">IN</span> 参数<span class="number">2</span> 类型···])</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段</span><br><span class="line">    <span class="keyword">INTO</span> 参数</span><br><span class="line"><span class="keyword">FROM</span> 表名;</span><br><span class="line">其他操作 </span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> 存储过程名();</span><br></pre></td></tr></tbody></table></figure><p><strong>注：</strong>所有MySQL变量都必须以@开始。</p><p>以下是两个书上的实例:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建存储过程</span></span><br><span class="line"><span class="comment">-- 有三个输出参数</span></span><br><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span></span><br><span class="line">    <span class="keyword">PROCEDURE</span> <span class="string">`test`</span>.<span class="string">`hhh`</span>(<span class="keyword">OUT</span> pl <span class="built_in">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line"><span class="keyword">OUT</span> ph <span class="built_in">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line"><span class="keyword">OUT</span> pa <span class="built_in">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(prod_price)</span><br><span class="line"><span class="keyword">INTO</span> pl</span><br><span class="line"><span class="keyword">FROM</span> products;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(prod_price)</span><br><span class="line"><span class="keyword">INTO</span> ph</span><br><span class="line"><span class="keyword">FROM</span> products;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(prod_price)</span><br><span class="line"><span class="keyword">INTO</span> pa</span><br><span class="line"><span class="keyword">FROM</span> products;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--调用存储过程</span></span><br><span class="line"><span class="keyword">CALL</span> hhh(@a, @b, @c); <span class="comment">--将结果返回给abc桑变量，不过不会直接显示，需要SELECT查询。</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建存储方法owo</span></span><br><span class="line"><span class="comment">--有两个参数，一个输入，一个输出</span></span><br><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span></span><br><span class="line">    <span class="comment">/*[DEFINER = { user | CURRENT_USER }]*/</span></span><br><span class="line">    <span class="keyword">PROCEDURE</span> <span class="string">`test`</span>.<span class="string">`owo`</span>(</span><br><span class="line">    <span class="keyword">IN</span> onumber <span class="built_in">INT</span>,</span><br><span class="line">    <span class="keyword">OUT</span> ototal  <span class="built_in">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">SUM</span>(item_price*quantity)</span><br><span class="line">    <span class="keyword">FROM</span> oderitems</span><br><span class="line">    <span class="keyword">WHERE</span> order_num = onumber</span><br><span class="line">    <span class="keyword">INTO</span> ototal;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">END</span>$$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">--调用owo</span></span><br><span class="line"><span class="keyword">CALL</span> owo(<span class="number">20005</span>, @total); <span class="comment">--20005作为输出，@total接受输出</span></span><br><span class="line"><span class="keyword">SELECT</span> @total</span><br></pre></td></tr></tbody></table></figure><p>还可以使用DECLARE，IF，THEN等完成更强大的存储过程。</p><p><font size="7">待补</font></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;视图&quot;&gt;&lt;a href=&quot;#视图&quot; class=&quot;headerlink&quot; title=&quot;视图&quot;&gt;&lt;/a&gt;视图&lt;/h1&gt;&lt;p&gt;视图是&lt;strong&gt;虚拟&lt;/strong&gt;的表。与包含数据的表不一样，视图只包含使用时动态检索数据的查询。不包含表中应该有的任何列或数据，它包含的是一个SQL查询。&lt;/p&gt;
&lt;p&gt;可以对视图执行SELECT操作，过滤和排序数据，将视图联结到其他视图或表，甚至能添加和更新数据&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://klaus08.top/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://klaus08.top/tags/MySQL/"/>
    
  </entry>
  
</feed>
